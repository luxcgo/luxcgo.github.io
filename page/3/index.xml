<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go猜想录</title>
    <link>https://luxcgo.github.io/</link>
    <description>Recent content on Go猜想录</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>2020-2022 Go猜想录</copyright>
    <lastBuildDate>Tue, 12 Apr 2022 01:21:16 +0800</lastBuildDate>
    
        <atom:link href="https://luxcgo.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>docker基本使用2</title>
        <link>https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A82/</link>
        <pubDate>Sat, 11 Sep 2021 15:27:19 +0800</pubDate>
        
        <guid>https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A82/</guid>
        <description>Go猜想录 https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A82/ -&lt;h2 id=&#34;初识docker&#34;&gt;初识docker&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 查看版本并顺便检查docker server正常启动，cli可以连接到engine&lt;/span&gt;
$ docker version

&lt;span style=&#34;color:#228b22&#34;&gt;# 查看engine的一些配置项&lt;/span&gt;
$ docker info

&lt;span style=&#34;color:#228b22&#34;&gt;# 查看docker command line structure&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# docker command的格式，为了解决激增的命令数量难以记忆的问题，推出Management Commands模式&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 1. 使用Management Commands: docker &amp;lt;command&amp;gt; &amp;lt;sub-command&amp;gt; (options)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 2. 使用Commands: docker &amp;lt;command&amp;gt; (options)&lt;/span&gt;
$ docker
&lt;span style=&#34;color:#228b22&#34;&gt;# 例子，如下两种模式的命令目的是一样的&lt;/span&gt;
$ docker container run
$ docker run

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;创建一个nginx服务器&#34;&gt;创建一个Nginx服务器&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Downloaded image &lt;code&gt;nginx&lt;/code&gt; from Docker Hub&lt;/li&gt;
&lt;li&gt;Started a new container from that image&lt;/li&gt;
&lt;li&gt;Opened port 80 on the host IP&lt;/li&gt;
&lt;li&gt;Routes that traffic to the container IP, port 80&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# --publish(or -p) 是一种映射host port到container port的方法&lt;/span&gt;
$ docker container run --publish 80:80 nginx

&lt;span style=&#34;color:#228b22&#34;&gt;# 在后台运行&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 可以使用docker container run --help查看更多详细内容&lt;/span&gt;
$ docker container run --publish 80:80 --detach nginx

&lt;span style=&#34;color:#228b22&#34;&gt;# docker ps亦可&lt;/span&gt;
$ docker container ls

&lt;span style=&#34;color:#228b22&#34;&gt;# 停止容器但不删除&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# docker stop亦可&lt;/span&gt;
$ docker container stop &lt;span style=&#34;color:#b452cd&#34;&gt;690&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# docker container run总是开启一个新的容器&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# docker container start是开启一个已经存在的停止的容器&lt;/span&gt;
$ docker container start &lt;span style=&#34;color:#b452cd&#34;&gt;690&lt;/span&gt;

$ docker container ls

$ docker container ls -a

&lt;span style=&#34;color:#228b22&#34;&gt;# 在不手动设置容器名称的情况下docker会随机生成一个adj+n的名称&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# detail: https://github.com/moby/moby/blob/master/pkg/namesgenerator/names-generator.go&lt;/span&gt;
$ docker container run --publish 80:80 --detach --name webhost nginx

$ docker container ls -a

&lt;span style=&#34;color:#228b22&#34;&gt;# docker logs亦可&lt;/span&gt;
$ docker container logs webhost

$ docker container top

&lt;span style=&#34;color:#228b22&#34;&gt;# Display the running processes of a container&lt;/span&gt;
$ docker container top webhost

$ docker container --help

$ docker container ls -a

&lt;span style=&#34;color:#228b22&#34;&gt;# docker rm亦可&lt;/span&gt;
$ docker container rm 63f &lt;span style=&#34;color:#b452cd&#34;&gt;690&lt;/span&gt; ode

$ docker container ls

&lt;span style=&#34;color:#228b22&#34;&gt;# docker为了防止误操作，不能直接删除一个运行的容器，除非加参数`-f`强制删除&lt;/span&gt;
$ docker container rm -f 63f

$ docker container ls -a

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;docker-container-run背后的动作&#34;&gt;&lt;code&gt;docker container run&lt;/code&gt;背后的动作&lt;/h2&gt;
&lt;p&gt;以&lt;code&gt;docker container run nginx&lt;/code&gt;为例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Looks for that image locally in image cache, doesn&amp;rsquo;t find anything&lt;/li&gt;
&lt;li&gt;Then looks in remote image repository (defaults to Docker Hub)&lt;/li&gt;
&lt;li&gt;Downloads the latest version (nginx:latest by default)&lt;/li&gt;
&lt;li&gt;Creates new container based on that image and prepares to start&lt;/li&gt;
&lt;li&gt;Gives it a virtual IP on a private network inside docker engine&lt;/li&gt;
&lt;li&gt;Opens up port 80 on host and forwards to port 80 in container&lt;/li&gt;
&lt;li&gt;Starts container by using the CMD in the image Dockerfile&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简单的命令背后docker帮我们做了很多默认的工作，实际上它是高度定制化的，我们可以根据需要进行修改&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker container run &amp;ndash;publish 8080:80 &amp;ndash;name webhost -d nginx:1.11 nginx -T&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如上所示，我们修改了host监听的端口为8080，修改了镜像版本为1.11，修改了开启容器时的CMD命令&lt;/p&gt;
&lt;h2 id=&#34;container是个什么东西&#34;&gt;&lt;code&gt;container&lt;/code&gt;是个什么东西&lt;/h2&gt;
&lt;p&gt;本质上一个运行着的容器只是资源受限的进程，当进程结束了container也就退出了，如下是在linux环境下的实验结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# ubuntu20.04&lt;/span&gt;
lucas@ubuntu:~$ docker run --name mongo -d mongo
4137bf48c62bb2230f717c5d2077419b1dc93ce05cd3db414f81c0aa4262bdac
lucas@ubuntu:~$ docker ps
CONTAINER ID   IMAGE    COMMAND                  CREATED          STATUS          PORTS        NAMES
4137bf48c62b   mongo    &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;docker-entrypoint.s…&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#b452cd&#34;&gt;26&lt;/span&gt; seconds ago   Up &lt;span style=&#34;color:#b452cd&#34;&gt;25&lt;/span&gt; seconds   27017/tcp    mongo
lucas@ubuntu:~$ ps aux | grep mongo
systemd+ &lt;span style=&#34;color:#b452cd&#34;&gt;3800614&lt;/span&gt;  0.8  2.7 &lt;span style=&#34;color:#b452cd&#34;&gt;1538116&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;112280&lt;/span&gt; ?      Ssl  15:29   0:01 mongod --bind_ip_all
lucas    &lt;span style=&#34;color:#b452cd&#34;&gt;3801103&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#b452cd&#34;&gt;6300&lt;/span&gt;   &lt;span style=&#34;color:#b452cd&#34;&gt;736&lt;/span&gt; pts/0    S+   15:31   0:00 grep --color=auto mongo
lucas@ubuntu:~$ docker rm -f mongo
mongo
lucas@ubuntu:~$ ps aux | grep mongo
lucas    &lt;span style=&#34;color:#b452cd&#34;&gt;3801302&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#b452cd&#34;&gt;6300&lt;/span&gt;   &lt;span style=&#34;color:#b452cd&#34;&gt;676&lt;/span&gt; pts/0    S+   15:32   0:00 grep --color=auto mongo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在&lt;code&gt;mac&lt;/code&gt;环境上略有不同，&lt;code&gt;docker engine&lt;/code&gt;实际上是运行在基于&lt;a href=&#34;https://github.com/machyve/xhyve&#34;&gt;xhyve&lt;/a&gt; &lt;code&gt;VM&lt;/code&gt;上的一个&lt;code&gt;Alpine Linux&lt;/code&gt;，我们进入到这个&lt;code&gt;docker VM&lt;/code&gt;中才能看到具体运行着的进程&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# macOS Big Sur on M1 chip &lt;/span&gt;
$ docker run --name mongo -d mongo 
4ce052bde09ce12cef9856e270347c549b988483fdc86051ee7a6cf409b6d15b
$ docker run --name mongo -d mongo 
$ docker run -it --rm --privileged --pid=host justincormack/nsenter1
/ &lt;span style=&#34;color:#228b22&#34;&gt;# ps aux | grep mongo&lt;/span&gt;
 &lt;span style=&#34;color:#b452cd&#34;&gt;2551&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;999&lt;/span&gt;       0:00 mongod --bind_ip_all
 &lt;span style=&#34;color:#b452cd&#34;&gt;2712&lt;/span&gt; root      0:00 grep mongo
$ docker rm -f mongo  
mongo
$ docker run -it --rm --privileged --pid=host justincormack/nsenter1 
/ &lt;span style=&#34;color:#228b22&#34;&gt;#  ps aux | grep mongo&lt;/span&gt;
 &lt;span style=&#34;color:#b452cd&#34;&gt;2839&lt;/span&gt; root      0:00 grep mongo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;lab-管理多个container&#34;&gt;Lab: 管理多个container&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# mysql官方镜像暂不支持arm64，只支持x86_64，所以换用mysql/mysql-server镜像&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# uname -a 查看架构&lt;/span&gt;
$ docker container run -d -p 3306:3306 --name db -e &lt;span style=&#34;color:#00688b&#34;&gt;MYSQL_RANDOM_ROOT_PASSWORD&lt;/span&gt;=yes mysql/mysql-server
&lt;span style=&#34;color:#228b22&#34;&gt;# 查看mysql生成的密码&lt;/span&gt;
$ docker logs db
$ docker container run -d --name webserver -p 8080:80 httpd
$ docker container run -d --name proxy -p 80:80 nginx
$ docker ps
&lt;span style=&#34;color:#228b22&#34;&gt;# clean up&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 直接使用官方推出的自动补全功能，非常好用(tab completion)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# https://docs.docker.com/compose/completion/&lt;/span&gt;
$ docker container stop webserver proxy db
$ docker container rm webserver proxy db
$ docker ps -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;查看container状态的几个命令&#34;&gt;查看&lt;code&gt;container&lt;/code&gt;状态的几个命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# process list in one container&lt;/span&gt;
$ docker container top

&lt;span style=&#34;color:#228b22&#34;&gt;# details of one container config&lt;/span&gt;
$ docker container inspect

&lt;span style=&#34;color:#228b22&#34;&gt;# performance stats for all containers&lt;/span&gt;
$ docker container stats
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;进入一个container&#34;&gt;进入一个&lt;code&gt;container&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# -i keep session open to receive terminal input&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# -t simulates a real terminal, like what ssh dose&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 修改开启容器时的CMD命令为bash，结合-it的OPTIONS，直接进入到对应镜像的bash环境中&lt;/span&gt;
$ docker container run -it --name nginx nginx bash
&lt;span style=&#34;color:#228b22&#34;&gt;# 当我们退出bash的同时容器就相应的停止了，因为我们修改了&amp;#34;Cmd&amp;#34;为bash&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# 重新进入上面已经停止的容器的bash中&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# docker start --help&lt;/span&gt;
$ docker start -ai nginx

&lt;span style=&#34;color:#228b22&#34;&gt;# 进入一个已经运行着其他命令的容器的shell&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 例如mysql&lt;/span&gt;
$ docker container run -d -p 3306:3306 --name db -e &lt;span style=&#34;color:#00688b&#34;&gt;MYSQL_RANDOM_ROOT_PASSWORD&lt;/span&gt;=yes mysql/mysql-server
$ docker &lt;span style=&#34;color:#658b00&#34;&gt;exec&lt;/span&gt; -it mysql bash
&lt;span style=&#34;color:#228b22&#34;&gt;# 但此时我们退出bash的时候容器并不会停止，因为&amp;#34;exec&amp;#34;基于已有的容器运行在另外一个进程中，并不会影响mysql daemon所在的主进程&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-t simulates a real terminal,like what ssh dose
-i keep session open to receive terminal input
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/&#34;&gt;https://docs.docker.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bretfisher.com/docker-for-mac-commands-for-getting-into-local-docker-vm/&#34;&gt;Docker Desktop for Mac Commands for Getting Into The Local Docker VM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mikegcoleman/docker101/blob/master/Docker_eBook_Jan_2017.pdf&#34;&gt;Docker for the Virtualization Admin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;## Container VS. VM: It&amp;#39;s Just a Process&lt;/span&gt;

$ docker run --name mongo -d mongo

$ docker ps

$ docker top mongo

$ docker stop mongo

$ docker ps

$ docker top mongo

$ docker start mongo

$ docker ps

$ docker top mongo

&lt;span style=&#34;color:#228b22&#34;&gt;## Assignment Answers: Manage Multiple Containers&lt;/span&gt;

$ docker container run -d -p 3306:3306 --name db -e &lt;span style=&#34;color:#00688b&#34;&gt;MYSQL_RANDOM_ROOT_PASSWORD&lt;/span&gt;=yes MYSQL_RANDOM_ROOT_PASSWORD

$ docker container logs db

$ docker container run -d --name webserver -p 8080:80 httpd

$ docker ps

$ docker container run -d --name proxy -p 80:80 nginx

$ docker ps

$ docker container ls

$ docker container stop TAB COMPLETION

$ docker ps -a

$ docker container ls -a

$ docker container rm

$ docker ps -a

$ docker image ls

&lt;span style=&#34;color:#228b22&#34;&gt;## What&amp;#39;s Going On In Containers: CLI Process Monitoring&lt;/span&gt;

$ docker container run -d --name nginx nginx

$ docker container run -d --name mysql -e &lt;span style=&#34;color:#00688b&#34;&gt;MYSQL_RANDOM_ROOT_PASSWORD&lt;/span&gt;=&lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt; mysql

$ docker container ls

$ docker container top mysql

$ docker container top nginx

$ docker container inspect mysql

$ docker container stats --help

$ docker container stats

$ docker container ls

&lt;span style=&#34;color:#228b22&#34;&gt;## Getting a Shell Inside Containers: No Need for SSH&lt;/span&gt;

$ docker container run -help

$ docker container run -it --name proxy nginx bash

$ docker container ls

$ docker container ls -a

$ docker container run -it --name ubuntu ubuntu

$ docker container ls

$ docker container ls -a

$ docker container start --help

$ docker container start -ai ubuntu

$ docker container &lt;span style=&#34;color:#658b00&#34;&gt;exec&lt;/span&gt; --help

$ docker container &lt;span style=&#34;color:#658b00&#34;&gt;exec&lt;/span&gt; -it mysql bash

$ docker container ls

$ docker pull alpine

$ docker image ls

$ docker container run -it alpine bash

$ docker container run -it alpine sh

&lt;span style=&#34;color:#228b22&#34;&gt;## $ docker Networks: Concepts for Private and Public Comms in Containers&lt;/span&gt;

$ docker container run -p 80:80 --name webhost -d nginx

$ docker container port webhost

$ docker container inspect --format &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;{{ .NetworkSettings.IPAddress }}&amp;#39;&lt;/span&gt; webhost

&lt;span style=&#34;color:#228b22&#34;&gt;## $ docker Networks: CLI Management of Virtual Networks&lt;/span&gt;

$ docker network ls

$ docker network inspect bridge

$ docker network ls

$ docker network create my_app_net

$ docker network ls

$ docker network create --help

$ docker container run -d --name new_nginx --network my_app_net nginx

$ docker network inspect my_app_net

$ docker network --help

$ docker network connect

$ docker container inspect TAB COMPLETION

$ docker container disconnect TAB COMPLETION

$ docker container inspect

&lt;span style=&#34;color:#228b22&#34;&gt;## $ docker Networks: DNS and How Containers Find Each Other&lt;/span&gt;

$ docker container ls

$ docker network inspect TAB COMPLETION

$ docker container run -d --name my_nginx --network my_app_net nginx

$ docker container inspect TAB COMPLETION

$ docker container &lt;span style=&#34;color:#658b00&#34;&gt;exec&lt;/span&gt; -it my_nginx ping new_nginx

$ docker container &lt;span style=&#34;color:#658b00&#34;&gt;exec&lt;/span&gt; -it new_nginx ping my_nginx

$ docker network ls

$ docker container create --help

&lt;span style=&#34;color:#228b22&#34;&gt;## Assignment Answers: Using Containers for CLI Testing&lt;/span&gt;

$ docker container run --rm -it centos:7 bash

$ docker ps -a

$ docker container run --rm -it ubuntu:14.04 bash

$ docker ps -a

&lt;span style=&#34;color:#228b22&#34;&gt;## Assignment Answers: DNS Round Robin Testing&lt;/span&gt;

$ docker network create dude

$ docker container run -d --net dude --net-alias search elasticsearch:2

$ docker container ls

$ docker container run --rm -- net dude alpine nslookup search

$ docker container run --rm --net dude centos curl -s search:9200

$ docker container ls

$ docker container rm -f TAB COMPLETION


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;20210918 中秋计划&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stanford CS107补上反码补码&lt;/li&gt;
&lt;li&gt;mit-6.033补上网络协议啥的&lt;/li&gt;
&lt;li&gt;traefik看完&lt;/li&gt;
&lt;li&gt;go网络看完&lt;/li&gt;
&lt;li&gt;ai教Lecture 1: Overview | Stanford CS221: AI (Autumn 2019)&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A82/ - 2020-2022 Go猜想录</description>
        </item>
    
    
    
        <item>
        <title>Go Test</title>
        <link>https://luxcgo.github.io/posts/go/go-test/</link>
        <pubDate>Sun, 09 May 2021 15:32:48 +0800</pubDate>
        
        <guid>https://luxcgo.github.io/posts/go/go-test/</guid>
        <description>Go猜想录 https://luxcgo.github.io/posts/go/go-test/ -&lt;h2 id=&#34;写test的好处&#34;&gt;写test的好处&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;寻找不易发现的bug、edge case、side effect&lt;/li&gt;
&lt;li&gt;记录目标行为，可作为一个文档帮助他人理解代码&lt;/li&gt;
&lt;li&gt;自动化可重复&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;test包基本使用&#34;&gt;test包基本使用&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/testing/#pkg-overview&#34;&gt;https://golang.org/pkg/testing/#pkg-overview&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// math/math.go
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; math

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Sum&lt;/span&gt;(numbers []&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; {
	sum := &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; _, n := &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;range&lt;/span&gt; numbers {
		sum += n
	}
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; sum
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// math/math_test.go
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; math

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;testing&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;TestSum&lt;/span&gt;(t *testing.T) {
	sum := &lt;span style=&#34;color:#008b45&#34;&gt;Sum&lt;/span&gt;([]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;})
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; sum != &lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt; {
		t.&lt;span style=&#34;color:#008b45&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fail want 11 bug got %d&amp;#34;&lt;/span&gt;, sum)
	}
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;test文件的文件名和函数签名都有格式的要求，并要放在和被测试的函数同一个package下
满足上述要求，运行go test命令就可以看到测试函数的运行结果。&lt;/p&gt;
&lt;h2 id=&#34;test包实现原理&#34;&gt;test包实现原理&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; sleep

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;testing&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;TestTmpExcutable&lt;/span&gt;(t *testing.T) {
	t.&lt;span style=&#34;color:#008b45&#34;&gt;Log&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;TestTmpExcutable&amp;#34;&lt;/span&gt;)
	time.&lt;span style=&#34;color:#008b45&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; * time.Minute)
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/luxcgo/imgs4md/raw/master/img/20220110005053.png&#34; alt=&#34;image-20210509181957708&#34;&gt;&lt;/p&gt;
&lt;p&gt;运行&lt;code&gt;go test -v&lt;/code&gt;后可以看到进程中运行着一个临时的二进制文件，它就是由&lt;code&gt;go test&lt;/code&gt;命令生成出来的可执行程序，我们可以直接运行该文件。当go test程序执行完成后，该临时文件就会被删除。
可见测试程序没有什么特别之处，我们完全可以不使用该包写出类似检验程序正确性的代码，但该包简化了我们实现的步骤。&lt;/p&gt;
&lt;h2 id=&#34;test命名约定&#34;&gt;test命名约定&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文件名以&lt;code&gt;_test.go&lt;/code&gt;结尾&lt;/li&gt;
&lt;li&gt;函数名格式类似&lt;code&gt;TestXxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;变量名一般使用&lt;code&gt;arg&lt;/code&gt;、&lt;code&gt;want&lt;/code&gt;、&lt;code&gt;got&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 函数名例子
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 函数签名：Test接受者类型_方法名_参数类型
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;TestDog_Bark_muzzled&lt;/span&gt;(t *testing.T) {

}

&lt;span style=&#34;color:#228b22&#34;&gt;// 变量名例子
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;TestColor&lt;/span&gt;(t *testing.T) {
	arg := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;
	want := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;#00000FF&amp;#34;&lt;/span&gt;
	got := &lt;span style=&#34;color:#008b45&#34;&gt;Color&lt;/span&gt;(arg)
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; got != want {
		t.&lt;span style=&#34;color:#008b45&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Color(%q) = %q; want %q&amp;#34;&lt;/span&gt;, arg, got, want)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;语言点：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/fmt/&#34;&gt;https://golang.org/pkg/fmt/&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Integer:
%q	a single-quoted character literal safely escaped with Go syntax.
String and slice of bytes (treated equivalently with these verbs):
%q	a double-quoted string safely escaped with Go syntax
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;testingt的方法使用&#34;&gt;testing.T的方法使用&lt;/h2&gt;
&lt;h3 id=&#34;方法列表&#34;&gt;方法列表&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/testing/#T&#34;&gt;https://golang.org/pkg/testing/#T&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fail: 测试失败但继续运行&lt;/li&gt;
&lt;li&gt;FailNow: 测试失败并停止执行当前goroutine的test&lt;/li&gt;
&lt;li&gt;Log: 测试失败或者以verbose模式执行test时将内容打印到终端&lt;/li&gt;
&lt;li&gt;Error: Log + Fail&lt;/li&gt;
&lt;li&gt;Fatal: Log +FailNow&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法选择&#34;&gt;方法选择&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果后续执行没有意义了，就使用 t.Fatal&lt;/li&gt;
&lt;li&gt;如果当前执行的结果与预期不符，但后续操作还可以正常执行，就使用 t.Error ,这样可以更方便看到全局都有什么样的错误信息，而不至于出现了一个小错误就立即终止。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可读的错误信息&#34;&gt;可读的错误信息&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;调用了哪个函数使用了什么参数，返回了什么样的错误，我们需要什么样的返回值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;t.&lt;span style=&#34;color:#008b45&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;SomeFunc(%v) err = %v; want %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;, err, want)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有时如果参数太多，我们也可以酌情选择打印出我们需要的参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输出的内容尽可能简洁，易于理解，最重要的是通过错误信息可以方便的复现出整个出错的过程，更好的 debug 。
正如下面的例子只需要&lt;code&gt;seed&lt;/code&gt;就可以复现出整个流程，但若只打印出整个数组就不易于理解。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; random

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;math/rand&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;testing&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;TestPick&lt;/span&gt;(t *testing.T) {
	seed := time.&lt;span style=&#34;color:#008b45&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#008b45&#34;&gt;UnixNano&lt;/span&gt;()
	r := rand.&lt;span style=&#34;color:#008b45&#34;&gt;New&lt;/span&gt;(rand.&lt;span style=&#34;color:#008b45&#34;&gt;NewSource&lt;/span&gt;(seed))
	arg := &lt;span style=&#34;color:#658b00&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;25&lt;/span&gt;)
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;25&lt;/span&gt;; i++ {
		arg[i] = r.&lt;span style=&#34;color:#008b45&#34;&gt;Int&lt;/span&gt;()
	}
	got := &lt;span style=&#34;color:#008b45&#34;&gt;Pick&lt;/span&gt;(arg)
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v := &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;range&lt;/span&gt; arg {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; got == v {
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;
		}
	}
	t.&lt;span style=&#34;color:#008b45&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Pick(seed=%d) = %d; not in slice&amp;#34;&lt;/span&gt;, seed, got)
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;example-可测试的案例代码&#34;&gt;Example: 可测试的案例代码&lt;/h2&gt;
&lt;h3 id=&#34;example的好处&#34;&gt;Example的好处&lt;/h3&gt;
&lt;p&gt;如果案例代码未经维护则随着功能代码的更新很容易就失效无法使用，但案例代码若写成可测试的代码，则可保证功能代码更新后运行&lt;code&gt;go test&lt;/code&gt;在测试的时候发现问题，保证案例代码的可用性。&lt;/p&gt;
&lt;h3 id=&#34;example命名约定&#34;&gt;Example命名约定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;文件名以&lt;code&gt;_test.go&lt;/code&gt;结尾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数名格式&lt;code&gt;func ExampleXX_XX_suffix() { ... }&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 包级别
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Example&lt;/span&gt;() { ... }
&lt;span style=&#34;color:#228b22&#34;&gt;// 方法级别
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ExampleF&lt;/span&gt;() { ... }
&lt;span style=&#34;color:#228b22&#34;&gt;// 类型级别
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ExampleT&lt;/span&gt;() { ... }
&lt;span style=&#34;color:#228b22&#34;&gt;// T类型的M方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ExampleT_M&lt;/span&gt;() { ... }

&lt;span style=&#34;color:#228b22&#34;&gt;// 若有多个example函数，可加后缀以示区分。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Example_suffix&lt;/span&gt;() { ... }
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ExampleF_suffix&lt;/span&gt;() { ... }
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ExampleT_suffix&lt;/span&gt;() { ... }
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ExampleT_M_suffix&lt;/span&gt;() { ... }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整个测试文件被识别为example条件：有一个example函数，和至少一个其他的函数、类型、变量或常量，且不含有test或benchmark函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example使用技巧&#34;&gt;Example使用技巧&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;运行&lt;code&gt;godoc -http=:3000&lt;/code&gt;可以在浏览器中看到排版优美的案例代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果因为某些原因（比如在测试interface接口或明确展示出导入了什么包）希望将test文件的全部代码，而不只是example函数，显示在godoc中，则只需要将该example函数抽离出来，单独放在一个文件里即可，不要忘记同时要满足上述命名约定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用如下格式，在go test时会检测example函数的输出是否与Output下面的内容相符。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt; 	&lt;span style=&#34;color:#228b22&#34;&gt;// Output:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt; 	&lt;span style=&#34;color:#228b22&#34;&gt;// Hello World
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用如下格式，在go test时会检测example函数的输出是否与Unordered output下面的内容相符，但检测顺序是无序的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// Unordered output:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// BTC 比特币
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// ETH 以太坊
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// DOGE 狗狗币
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example小案例&#34;&gt;Example小案例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// example/greet.go
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// Show how to write testable examples.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; greet

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt; Dog &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt;{}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (d Dog) &lt;span style=&#34;color:#008b45&#34;&gt;Hello&lt;/span&gt;() &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Sprint&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;woof woof!&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// example/greet_test.go
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; greet_test

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ExampleDog_Hello_demo&lt;/span&gt;() {
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Dog type w/ demo label&amp;#34;&lt;/span&gt;)

	&lt;span style=&#34;color:#228b22&#34;&gt;// Output:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// Dog type w/ demo label
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// example/example_greet_test.go
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; greet_test

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#228b22&#34;&gt;// Needed for initialize side effect
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	_ &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; m = &lt;span style=&#34;color:#658b00&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ExampleDog_Hello&lt;/span&gt;() {
	m = &lt;span style=&#34;color:#658b00&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;)
	m[&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ETH&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;以太坊&amp;#34;&lt;/span&gt;
	m[&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;BTC&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;比特币&amp;#34;&lt;/span&gt;
	m[&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;DOGE&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;狗狗币&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; k, v := &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;range&lt;/span&gt; m {
		fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(k, v)
	}

	&lt;span style=&#34;color:#228b22&#34;&gt;// Unordered output:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// BTC 比特币
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// ETH 以太坊
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// DOGE 狗狗币
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/luxcgo/imgs4md/raw/master/img/20220110005130.png&#34; alt=&#34;image-20210522144118126&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/luxcgo/imgs4md/raw/master/img/20220110005124.png&#34; alt=&#34;image-20210522144008859&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;类型比较&#34;&gt;类型比较&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Comparison_operators&#34;&gt;https://golang.org/ref/spec#Comparison_operators&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/reflect/#DeepEqual&#34;&gt;https://golang.org/pkg/reflect/#DeepEqual&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.luffy.vip/post/2020-10-17-golang-comparison/&#34;&gt;http://www.luffy.vip/post/2020-10-17-golang-comparison/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/testing/&#34;&gt;https://golang.org/pkg/testing/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/image/&#34;&gt;https://golang.org/pkg/image/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/src/image/decode_example_test.go&#34;&gt;https://golang.org/src/image/decode_example_test.go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/sort/&#34;&gt;https://golang.org/pkg/sort/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/src/sort/example_interface_test.go&#34;&gt;https://golang.org/src/sort/example_interface_test.go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fluhus/godoc-tricks&#34;&gt;https://github.com/fluhus/godoc-tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/joncalhoun/twg&#34;&gt;https://github.com/joncalhoun/twg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://testwithgo.com/&#34;&gt;https://testwithgo.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dave.cheney.net/2019/05/07/prefer-table-driven-tests&#34;&gt;https://dave.cheney.net/2019/05/07/prefer-table-driven-tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/subtests&#34;&gt;https://blog.golang.org/subtests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;on-the-list&#34;&gt;on the list&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;subtests&lt;/li&gt;
&lt;li&gt;naming conventions&lt;img src=&#34;https://gitee.com/luxcgo/imgs4md/raw/master/img/20220110005122.png&#34; alt=&#34;image-20210510004538186&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;https://github.com/stretchr/testify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://luxcgo.github.io/posts/go/go-test/ - 2020-2022 Go猜想录</description>
        </item>
    
    
    
        <item>
        <title>docker基本使用1</title>
        <link>https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A81/</link>
        <pubDate>Sat, 13 Mar 2021 16:48:30 +0800</pubDate>
        
        <guid>https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A81/</guid>
        <description>Go猜想录 https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A81/ -&lt;h1 id=&#34;1-容器的基础命令&#34;&gt;1. 容器的基础命令&lt;/h1&gt;
&lt;h2 id=&#34;使用docker的好处&#34;&gt;使用docker的好处&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;便于构建各种依赖关系&lt;/li&gt;
&lt;li&gt;快速构建&lt;/li&gt;
&lt;li&gt;快速迁移&lt;/li&gt;
&lt;li&gt;和宿主主机互不影响&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;初步使用&#34;&gt;初步使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker run busybox &lt;span style=&#34;color:#658b00&#34;&gt;echo&lt;/span&gt; hello world
hello world

$ docker run -ti ubuntu
root@3cc1d9fcadda:/# apt-get update
root@3cc1d9fcadda:/# apt-get install figlet
root@3cc1d9fcadda:/# figlet LuxcGo
 _                    ____
| |   _   ___  _____ / ___| ___
| |  | | | &lt;span style=&#34;color:#cd5555&#34;&gt;\ \/&lt;/span&gt; / __| |  _ / _ &lt;span style=&#34;color:#cd5555&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&lt;/span&gt;| |__| |_| |&amp;gt;  &amp;lt; (__| |_| | (_) |
|_____&lt;span style=&#34;color:#cd5555&#34;&gt;\_&lt;/span&gt;_,_/_/&lt;span style=&#34;color:#cd5555&#34;&gt;\_\_&lt;/span&gt;__|&lt;span style=&#34;color:#cd5555&#34;&gt;\_&lt;/span&gt;___|&lt;span style=&#34;color:#cd5555&#34;&gt;\_&lt;/span&gt;__/
root@3cc1d9fcadda:/# dpkg -l
root@3cc1d9fcadda:/# dpkg -l | wc -l
&lt;span style=&#34;color:#b452cd&#34;&gt;98&lt;/span&gt;

lucas@VM-12-4-ubuntu:~$ dpkg -l | wc -l
&lt;span style=&#34;color:#b452cd&#34;&gt;1877&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;运行一个容器&#34;&gt;运行一个容器&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker run jpetazzo/clock

$ sleep &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt; &amp;amp;
[1] &lt;span style=&#34;color:#b452cd&#34;&gt;18495&lt;/span&gt;
$
[1]  + &lt;span style=&#34;color:#b452cd&#34;&gt;18495&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;done&lt;/span&gt;       sleep &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# 后台创建并启动和sleep命令类似&lt;/span&gt;
$ docker run -d jpetazzo/clock
&lt;span style=&#34;color:#228b22&#34;&gt;# 只显示运行着的容器&lt;/span&gt;
$ docker ps
&lt;span style=&#34;color:#228b22&#34;&gt;# 显示所有容器&lt;/span&gt;
$ docker ps -a
&lt;span style=&#34;color:#228b22&#34;&gt;# 查看最后一个启动的容器&lt;/span&gt;
$ docker ps -l
&lt;span style=&#34;color:#228b22&#34;&gt;# 查看所有正在运行的容器的id（--quiet）&lt;/span&gt;
$ docker ps -q
&lt;span style=&#34;color:#228b22&#34;&gt;# 可以同时合并多条命令&lt;/span&gt;
$ docker ps -ql
$ docker ps -q -l

&lt;span style=&#34;color:#228b22&#34;&gt;# 查看日志&lt;/span&gt;
$ docker logs &amp;lt;container ID&amp;gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# --follow&lt;/span&gt;
$ docker logs &lt;span style=&#34;color:#b452cd&#34;&gt;82&lt;/span&gt; -f
&lt;span style=&#34;color:#228b22&#34;&gt;# --tail&lt;/span&gt;
$ docker logs &lt;span style=&#34;color:#b452cd&#34;&gt;82&lt;/span&gt; -f -n &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# polite shutdown（传递一个关闭的信号）&lt;/span&gt;
$ docker stop &lt;span style=&#34;color:#b452cd&#34;&gt;49&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 强制关闭&lt;/span&gt;
$ docker &lt;span style=&#34;color:#658b00&#34;&gt;kill&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;82&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;48&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;后台运行的容器&#34;&gt;后台运行的容器&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker run -ti ubuntu
root@3cc1d9fcadda:/# top
&lt;span style=&#34;color:#228b22&#34;&gt;# 退出容器&lt;/span&gt;
^p^q
&lt;span style=&#34;color:#228b22&#34;&gt;# 重新进入容器&lt;/span&gt;
$ docker attach &lt;span style=&#34;color:#b452cd&#34;&gt;34&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 或者用个 子命令&lt;/span&gt;
$ docker attach &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;$(&lt;/span&gt;docker ps -ql&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# 如果想要进入容器输入内容的话使用docker attach &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 如果只是要查看容器内的输出的内容话最好使用docker logs，如果进入容器看日志后使用了^c实际上是停止了容器&lt;/span&gt;
$ docker logs --tail &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; --follow &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;$(&lt;/span&gt;docker ps -ql&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# 重启停止的容器&lt;/span&gt;
$ docker start &amp;lt;containerID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;2-构建容器镜像&#34;&gt;2. 构建容器镜像&lt;/h1&gt;
&lt;h2 id=&#34;简单介绍&#34;&gt;简单介绍&lt;/h2&gt;
&lt;p&gt;一个容器包含一个底层的只读的镜像层和一个上层的可读可写的容器层
使用了copy-on-write技术加快启动时间
多个容器共享一个底层的镜像层，只需要根据需求修改上层的读写层即可
如果确认修改了可以在此基础上再创建一个image&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker commit
$ docker build
$ docker search marathon
&lt;span style=&#34;color:#228b22&#34;&gt;# version tag&lt;/span&gt;
$ docker pull debian:jessie
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;实际操作&#34;&gt;实际操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 查看新装了什么内容&lt;/span&gt;
$ docker diff &amp;lt;containerID&amp;gt; 
&lt;span style=&#34;color:#228b22&#34;&gt;# 使用修改后的容器新建一个镜像&lt;/span&gt;
$ docker commit &amp;lt;containerID&amp;gt; 
&lt;span style=&#34;color:#228b22&#34;&gt;# 为新镜像起名&lt;/span&gt;
$ docker tag ab580f989221 myfiglet
&lt;span style=&#34;color:#228b22&#34;&gt;# 直接使用新镜像&lt;/span&gt;
$ docker run myfiglet figlet hello

&lt;span style=&#34;color:#228b22&#34;&gt;# 可以在创建时直接起名&lt;/span&gt;
$ docker commit ab580f989 newfiglet 
$ docker run -ti newfiglet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;写dockerfile&#34;&gt;写Dockerfile&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt; ubuntu&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;RUN&lt;/span&gt; apt-get update&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;RUN&lt;/span&gt; apt-get install figlet&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker build -t figlet .

&lt;span style=&#34;color:#228b22&#34;&gt;# 不使用缓存&lt;/span&gt;
$ docker build --no-cache ...

&lt;span style=&#34;color:#228b22&#34;&gt;# 查看镜像的所有层的内容&lt;/span&gt;
$ docker &lt;span style=&#34;color:#658b00&#34;&gt;history&lt;/span&gt; figlet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用&lt;code&gt;CMD&lt;/code&gt;和&lt;code&gt;ENTRYPOINT&lt;/code&gt;
注意要使用json syntax&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt; ubuntu&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;RUN&lt;/span&gt; apt-get update&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;RUN&lt;/span&gt; [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;apt-get&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;install&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;figlet&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;figlet&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-f&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;script&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;CMD&lt;/span&gt; [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker build -t myfiglet .
$ docker run myfiglet
&lt;span style=&#34;color:#228b22&#34;&gt;# 重写了cmd保留了entrypoint&lt;/span&gt;
$ docker run myfiglet hola mundo
&lt;span style=&#34;color:#228b22&#34;&gt;# 重写entrypoint&lt;/span&gt;
$ docker run -it --entrypoint bash myfiglet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://container.training/intro-selfpaced.yml.html&#34;&gt;container.training&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://education.ardanlabs.com/courses/ultimate-docker&#34;&gt;Ardan Labs - Ultimate Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A81/ - 2020-2022 Go猜想录</description>
        </item>
    
    
  </channel>
</rss> 
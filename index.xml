<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>源泉的小站</title>
    <link>https://luxcgo.github.io/</link>
    <description>Recent content on 源泉的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>2020-2022 源泉的小站</copyright>
    <lastBuildDate>Sun, 16 Jan 2022 14:31:07 +0800</lastBuildDate>
    
        <atom:link href="https://luxcgo.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Go语言Goroutine管理</title>
        <link>https://luxcgo.github.io/posts/go/golang-goroutine-manage/</link>
        <pubDate>Sun, 16 Jan 2022 14:31:07 +0800</pubDate>
        
        <guid>https://luxcgo.github.io/posts/go/golang-goroutine-manage/</guid>
        <description>源泉的小站 https://luxcgo.github.io/posts/go/golang-goroutine-manage/ -&lt;h2 id=&#34;goroutine&#34;&gt;Goroutine&lt;/h2&gt;
&lt;p&gt;操作系统会为该应用程序创建一个进程。作为一个应用程序，它像一个为所有资源而运行的容器。这些资源包括内存地址空间、文件句柄、设备和线程。&lt;/p&gt;
&lt;p&gt;线程是操作系统调度的一种执行路径，用于在处理器执行我们在函数中编写的代码。一个进程从一个线程开始，即主线程，当该线程终止时，进程终止。这是因为主线程是应用程序的原点。然后，主线程可以依次启动更多的线程，而这些线程可以启动更多的线程。&lt;/p&gt;
&lt;p&gt;无论线程属于哪个进程，操作系统都会安排线程在可用处理器上运行。每个操作系统都有自己的算法来做出这些决定。&lt;/p&gt;
&lt;p&gt;Go 语言层面支持的 go 关键字，可以快速的让一个函数创建为 goroutine，我们可以认为 main 函数就是作为 goroutine 执行的。操作系统调度线程在可用处理器上运行，Go运行时调度 goroutines 在绑定到单个操作系统线程的逻辑处理器中运行(P)。即使使用这个单一的逻辑处理器和操作系统线程，也可以调度数十万 goroutine 以惊人的效率和性能并发运行。&lt;/p&gt;
&lt;h2 id=&#34;如何清真的使用-goroutine&#34;&gt;如何清真的使用 goroutine&lt;/h2&gt;
&lt;h3 id=&#34;能不用就不用&#34;&gt;能不用就不用&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	http.&lt;span style=&#34;color:#008b45&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(w http.ResponseWriter, r *http.Request) {
		fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Fprintln&lt;/span&gt;(w, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello, GopherCon SG&amp;#34;&lt;/span&gt;)
	})
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; err := http.&lt;span style=&#34;color:#008b45&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt;); err != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
			log.&lt;span style=&#34;color:#008b45&#34;&gt;Fatal&lt;/span&gt;(err)
		}
	}()

	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; {}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的程序可以看到，为了防止main.main退出，结尾使用了空的select语句阻塞住了主函数。某种意义上来说是一个好的做法因为没有使用for循环或其他浪费CPU的方式防止主进程退出。不过这仍然属于脱裤子放屁。因为在执行ListenAndServe函数的goroutine返回前什么都做不了，那就不如不开启一个goroutine去完成这个任务，直接在主线程里做。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你的 goroutine 在从另一个 goroutine 获得结果之前无法取得进展，那么通常情况下，你自己去做这项工作比委托它( go func() )更简单。这通常消除了将结果从 goroutine 返回到其启动器所需的大量状态跟踪和 chan 操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	http.&lt;span style=&#34;color:#008b45&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(w http.ResponseWriter, r *http.Request) {
		fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Fprintln&lt;/span&gt;(w, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello, GopherCon SG&amp;#34;&lt;/span&gt;)
	})
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; err := http.&lt;span style=&#34;color:#008b45&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt;); err != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
		log.&lt;span style=&#34;color:#008b45&#34;&gt;Fatal&lt;/span&gt;(err)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;调用者决定是否要并发&#34;&gt;调用者决定是否要并发&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// ListDirectory returns the contents of dir.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ListDirectory&lt;/span&gt;(dir &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;) ([]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;error&lt;/span&gt;)

&lt;span style=&#34;color:#228b22&#34;&gt;// ListDirectory returns a channel over which
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// directory entries will be published. When the list
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// of entries is exhausted, the channel will be closed.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ListDirectory&lt;/span&gt;(dir &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上两个API设计的功能都是要读取所有的目录&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将目录读取到一个 slice 中，然后返回整个切片，或者如果出现错误，则返回错误。这是同步调用的，ListDirectory 的调用方会阻塞，直到读取所有目录条目。根据目录的大小，这可能需要很长时间，并且可能会分配大量内存来构建目录条目名称的 slice。&lt;/li&gt;
&lt;li&gt;ListDirectory 返回一个 chan string，将通过该 chan 传递目录。当通道关闭时，这表示不再有目录。由于在 ListDirectory 返回后发生通道的填充，ListDirectory 可能内部启动 goroutine 来填充通道。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ListDirectory chan 版本还有两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过使用一个关闭的通道作为不再需要处理的项目的信号，ListDirectory 无法告诉调用者通过通道返回的项目集不完整，因为中途遇到了错误。调用方无法区分空目录与完全从目录读取的错误之间的区别。这两种方法都会导致从 ListDirectory 返回的通道会立即关闭。&lt;/li&gt;
&lt;li&gt;调用者必须继续从通道读取，直到它关闭，因为这是调用者知道开始填充通道的 goroutine 已经停止的唯一方法。这对 ListDirectory 的使用是一个严重的限制，调用者必须花时间从通道读取数据，即使它可能已经收到了它想要的答案。对于大中型目录，它可能在内存使用方面更为高效，但这种方法并不比原始的基于 slice 的方法快。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决之道是使用回调函数&lt;code&gt;func ListDirectory(dir string, fn func(string)) error&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;filepath.WalkDir 也是类似的模型，如果函数启动 goroutine，则必须向调用方提供显式停止该goroutine 的方法。通常，将异步执行函数的决定权交给该函数的调用方通常更容易。&lt;/p&gt;
&lt;h3 id=&#34;管理好整个生命周期&#34;&gt;管理好整个生命周期&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// leak is a buggy function. It launches a goroutine that
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// blocks receiving from a channel. Nothing will ever be
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// sent on that channel and the channel is never closed so
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// that goroutine will be blocked forever.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;leak&lt;/span&gt;() {
	ch := &lt;span style=&#34;color:#658b00&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)

	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;() {
		val := &amp;lt;-ch
		fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;We received a value:&amp;#34;&lt;/span&gt;, val)
	}()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;开启一个goroutine时要知道它何时会结束&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;或者有什么手段可以让它结束&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样就可以确保不会发生goroutine泄漏&lt;/p&gt;
&lt;h3 id=&#34;超时控制&#34;&gt;超时控制&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	tr := &lt;span style=&#34;color:#008b45&#34;&gt;NewTracker&lt;/span&gt;()
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;go&lt;/span&gt; tr.&lt;span style=&#34;color:#008b45&#34;&gt;Run&lt;/span&gt;()
	_ = tr.&lt;span style=&#34;color:#008b45&#34;&gt;Event&lt;/span&gt;(context.&lt;span style=&#34;color:#008b45&#34;&gt;Background&lt;/span&gt;(), &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;t1&amp;#34;&lt;/span&gt;)
	_ = tr.&lt;span style=&#34;color:#008b45&#34;&gt;Event&lt;/span&gt;(context.&lt;span style=&#34;color:#008b45&#34;&gt;Background&lt;/span&gt;(), &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;t2&amp;#34;&lt;/span&gt;)
	_ = tr.&lt;span style=&#34;color:#008b45&#34;&gt;Event&lt;/span&gt;(context.&lt;span style=&#34;color:#008b45&#34;&gt;Background&lt;/span&gt;(), &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;t3&amp;#34;&lt;/span&gt;)
	time.&lt;span style=&#34;color:#008b45&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt; * time.Second)
	ctx, cancel := context.&lt;span style=&#34;color:#008b45&#34;&gt;WithDeadline&lt;/span&gt;(context.&lt;span style=&#34;color:#008b45&#34;&gt;Background&lt;/span&gt;(), time.&lt;span style=&#34;color:#008b45&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#008b45&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;*time.Second))
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;cancel&lt;/span&gt;()
    &lt;span style=&#34;color:#228b22&#34;&gt;// 由写的人去关闭channel
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	tr.&lt;span style=&#34;color:#008b45&#34;&gt;Shutdown&lt;/span&gt;(ctx)
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;NewTracker&lt;/span&gt;() *Tracker {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &amp;amp;Tracker{
		ch: &lt;span style=&#34;color:#658b00&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;),
	}
}

&lt;span style=&#34;color:#228b22&#34;&gt;// Tracker knows how to track events for the application.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt; Tracker &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	ch   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;
	stop &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt;{}
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (t *Tracker) &lt;span style=&#34;color:#008b45&#34;&gt;Event&lt;/span&gt;(ctx context.Context, data &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;error&lt;/span&gt; {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; t.ch &amp;lt;- data:
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &amp;lt;-ctx.&lt;span style=&#34;color:#008b45&#34;&gt;Done&lt;/span&gt;():
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ctx.&lt;span style=&#34;color:#008b45&#34;&gt;Err&lt;/span&gt;()

	}
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (t *Tracker) &lt;span style=&#34;color:#008b45&#34;&gt;Run&lt;/span&gt;() {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; data := &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;range&lt;/span&gt; t.ch {
		time.&lt;span style=&#34;color:#008b45&#34;&gt;Sleep&lt;/span&gt;(time.Second)
		&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(data)
	}
	t.stop &amp;lt;- &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt;{}{}
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (t *Tracker) &lt;span style=&#34;color:#008b45&#34;&gt;Shutdown&lt;/span&gt;(ctx context.Context) {
	&lt;span style=&#34;color:#658b00&#34;&gt;close&lt;/span&gt;(t.ch)
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &amp;lt;-t.stop:
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &amp;lt;-ctx.&lt;span style=&#34;color:#008b45&#34;&gt;Done&lt;/span&gt;():
	}
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;一个好点的使用案例&#34;&gt;一个好点的使用案例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;serve&lt;/span&gt;(addr &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;, handler http.Handler, stop &amp;lt;-&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt;{}) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;error&lt;/span&gt; {
	s := http.Server{
		Addr:    addr,
		Handler: handler,
	}

	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;() {
		&amp;lt;-stop &lt;span style=&#34;color:#228b22&#34;&gt;// wait for stop signal
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		s.&lt;span style=&#34;color:#008b45&#34;&gt;Shutdown&lt;/span&gt;(context.&lt;span style=&#34;color:#008b45&#34;&gt;Background&lt;/span&gt;())
	}()

	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; s.&lt;span style=&#34;color:#008b45&#34;&gt;ListenAndServe&lt;/span&gt;()
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;serveApp&lt;/span&gt;(stop &amp;lt;-&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt;{}) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;error&lt;/span&gt; {
	mux := http.&lt;span style=&#34;color:#008b45&#34;&gt;NewServeMux&lt;/span&gt;()
	mux.&lt;span style=&#34;color:#008b45&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(resp http.ResponseWriter, req *http.Request) {
		fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Fprintln&lt;/span&gt;(resp, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello, QCon!&amp;#34;&lt;/span&gt;)
	})
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;serve&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0.0.0.0:8080&amp;#34;&lt;/span&gt;, mux, stop)
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;serveDebug&lt;/span&gt;(stop &amp;lt;-&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt;{}) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;error&lt;/span&gt; {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;serve&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;127.0.0.1:8001&amp;#34;&lt;/span&gt;, http.DefaultServeMux, stop)
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	done := &lt;span style=&#34;color:#658b00&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;error&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)
	stop := &lt;span style=&#34;color:#658b00&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt;{})
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;() {
		done &amp;lt;- &lt;span style=&#34;color:#008b45&#34;&gt;serveDebug&lt;/span&gt;(stop)
	}()
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;() {
		done &amp;lt;- &lt;span style=&#34;color:#008b45&#34;&gt;serveApp&lt;/span&gt;(stop)
	}()

	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; stopped &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#658b00&#34;&gt;cap&lt;/span&gt;(done); i++ {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; err := &amp;lt;-done; err != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
			fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;error: %v\n&amp;#34;&lt;/span&gt;, err)
		}
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; !stopped {
			stopped = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;
			&lt;span style=&#34;color:#658b00&#34;&gt;close&lt;/span&gt;(stop)
		}
	}
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理好了所有goroutine的生命周期，不会有泄露&lt;/li&gt;
&lt;li&gt;任何一个goroutine出现问题，都会让所有其他的goroutine优雅退出，不会造成任何数据的丢失&lt;/li&gt;
&lt;li&gt;所有需要后台执行的任务都是由调用者来决定&lt;/li&gt;
&lt;li&gt;调用者开启goroutine时有结束它的手段&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://go.dev/doc/faq#goroutines&#34;&gt;Why goroutines instead of threads?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dave.cheney.net/practical-go/presentations/qcon-china.html&#34;&gt;Practical Go: Real world advice for writing maintainable Go programs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ardanlabs.com/blog/2018/11/goroutine-leaks-the-forgotten-sender.html&#34;&gt;Goroutine Leaks - The Forgotten Sender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ardanlabs.com/blog/2019/04/concurrency-trap-2-incomplete-work.html&#34;&gt;Concurrency Trap #2: Incomplete Work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/da440dil&#34;&gt;da440dil&lt;/a&gt;/&lt;a href=&#34;https://github.com/da440dil/go-workgroup&#34;&gt;go-workgroup&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://luxcgo.github.io/posts/go/golang-goroutine-manage/ - 2020-2022 源泉的小站</description>
        </item>
    
    
    
        <item>
        <title>博客诞生记</title>
        <link>https://luxcgo.github.io/posts/%E5%B7%A5%E7%A8%8B/%E5%8D%9A%E5%AE%A2%E8%AF%9E%E7%94%9F%E8%AE%B0/</link>
        <pubDate>Sun, 09 Jan 2022 22:16:50 +0800</pubDate>
        
        <guid>https://luxcgo.github.io/posts/%E5%B7%A5%E7%A8%8B/%E5%8D%9A%E5%AE%A2%E8%AF%9E%E7%94%9F%E8%AE%B0/</guid>
        <description>源泉的小站 https://luxcgo.github.io/posts/%E5%B7%A5%E7%A8%8B/%E5%8D%9A%E5%AE%A2%E8%AF%9E%E7%94%9F%E8%AE%B0/ -&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;使用自定义指令hn，含义是hugo deploy。自动构建两个网站luxcgo.github.io和luxcgo.com的静态文件，分别是用于国外和国内访问，然后推送到我的私有仓库中，通过submodule功能同步到公有仓库。随即触发github action构建网站镜像推送到私有镜像仓库中，我的云服务器检测到镜像更新自动拉取完成网站更新。&lt;/p&gt;
&lt;h2 id=&#34;技术选型&#34;&gt;技术选型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;前端：静态博客&lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主题：参数尽量两种主题都可以使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;  ---
  title: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  date: 2021-11-15T01:39:12+08:00
  draft: &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;

  title: Git
  weight: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;
  bookToc: &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;
  bookHidden: &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;
  bookCollapseSection: &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;
  ---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://themes.gohugo.io/hugo-theme-diary/&#34;&gt;diary&lt;/a&gt;作为日常发布&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://themes.gohugo.io/themes/hugo-book/&#34;&gt;book&lt;/a&gt;作为整合发布&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后端：服务器选择&lt;a href=&#34;https://hub.docker.com/_/caddy&#34;&gt;caddy 2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运维：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;a href=&#34;https://traefik.io/&#34;&gt;traefik&lt;/a&gt;签发证书和反向代理&lt;/li&gt;
&lt;li&gt;使用deploy脚本自动构建静态文件和推送&lt;/li&gt;
&lt;li&gt;使用github action在推送时自动构建镜像并分别推送
&lt;ul&gt;
&lt;li&gt;使用git submodule&lt;/li&gt;
&lt;li&gt;luxcgo.github.io&lt;/li&gt;
&lt;li&gt;luxcgo.com&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用watchtower自动更新网站&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;定制化&#34;&gt;定制化&lt;/h2&gt;
&lt;h3 id=&#34;评论系统&#34;&gt;评论系统&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://utteranc.es/&#34;&gt;utteranc&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;issue以filepath作为唯一索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000018072952&#34;&gt;gitalk&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自动化&#34;&gt;自动化&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;vim ~/.zshrc
&lt;span style=&#34;color:#228b22&#34;&gt;# 自动化创建并打开文件&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# hn 文件名 (代表 hugo new posts/文件名.md)&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;hn&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;_hn(){ cd /Users/lucas/Documents/blog &amp;amp;&amp;amp; hugo new posts/$1.md &amp;amp;&amp;amp; open -a typora /Users/lucas/Documents/blog/content/posts/$1.md; }; _hn&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# 自动化部署&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# hd (代表 ./deploy)&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;hd&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;_hd(){ cd /Users/lucas/Documents/blog &amp;amp;&amp;amp; ./deploy; }; _hd&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#658b00&#34;&gt;source&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;图片存储&#34;&gt;图片存储&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1722255&#34;&gt;本地储存&lt;/a&gt; + &lt;a href=&#34;https://github.com/dabutvin/Imgbot&#34;&gt;图片压缩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PicGo自动上传 + &lt;a href=&#34;https://github.com/fhyoga/picgo-plugin-watermark&#34;&gt;水印插件&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fonts.google.com/specimen/Nanum+Pen+Script?preview.text=@luxcgo&amp;amp;preview.text_type=custom#standard-styles&#34;&gt;字体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;字号：28px&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://redketchup.io/favicon-generator&#34;&gt;favicon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://analytics.google.com/analytics&#34;&gt;Google Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://search.google.com/search-console&#34;&gt;谷歌收录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://busuanzi.ibruce.info/&#34;&gt;不蒜子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;搜索功能&lt;/li&gt;
&lt;li&gt;utterances增加定制化label&lt;/li&gt;
&lt;li&gt;新建comment repo&lt;/li&gt;
&lt;li&gt;文章权重&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://unknwon.cn/2020/200419-mew-home-unknwon-cn/&#34;&gt;Unknwon.中文博客搬新家&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://byvoid.com/zhs/&#34;&gt;Beyond the Void&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/BYVoid/hugo-theme-diary&#34;&gt;Diary theme customized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://orianna-zzo.github.io/series/blog%E5%85%BB%E6%88%90%E8%AE%B0/&#34;&gt;ZHENG Zi&amp;rsquo;ou.Blog养成记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youngkin.github.io/post/createafreeblogsite/&#34;&gt;Deploy script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.typora.io/Use-Typora-From-Shell-or-cmd/&#34;&gt;Use Typora from Shell or Cmd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/23137414&#34;&gt;bash alias怎么解析传入的参数的？&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://luxcgo.github.io/posts/%E5%B7%A5%E7%A8%8B/%E5%8D%9A%E5%AE%A2%E8%AF%9E%E7%94%9F%E8%AE%B0/ - 2020-2022 源泉的小站</description>
        </item>
    
    
    
        <item>
        <title>Tinykv第三方指导书</title>
        <link>https://luxcgo.github.io/posts/tinykv%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8C%87%E5%AF%BC%E4%B9%A6/</link>
        <pubDate>Sun, 12 Dec 2021 17:41:03 +0800</pubDate>
        
        <guid>https://luxcgo.github.io/posts/tinykv%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8C%87%E5%AF%BC%E4%B9%A6/</guid>
        <description>源泉的小站 https://luxcgo.github.io/posts/tinykv%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8C%87%E5%AF%BC%E4%B9%A6/ -&lt;h1 id=&#34;project2a-实现raft算法&#34;&gt;Project2A 实现Raft算法&lt;/h1&gt;
&lt;h2 id=&#34;数据结构&#34;&gt;数据结构&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// Prs map[uint64]*Progress
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// leader用来维护所有follower的日志进度信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt; Progress &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 当前follower和leader最后一个一致的日志的index
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	Match &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;uint64&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 当前follower希望leader下一次同步日志时，第一条日志的index
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Next &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;uint64&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;消息处理&#34;&gt;消息处理&lt;/h2&gt;
&lt;h3 id=&#34;msgpropose&#34;&gt;MsgPropose&lt;/h3&gt;
&lt;p&gt;作用：提议在领导者节点添加新的日志&lt;/p&gt;
&lt;p&gt;类型：本地消息&lt;/p&gt;
&lt;p&gt;处理者：领导人&lt;/p&gt;
&lt;h1 id=&#34;test&#34;&gt;Test&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;newTestRaft&lt;/span&gt;(id &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;uint64&lt;/span&gt;, peers []&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;uint64&lt;/span&gt;, election, heartbeat &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;, storage Storage) *Raft {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;newRaft&lt;/span&gt;(&lt;span style=&#34;color:#008b45&#34;&gt;newTestConfig&lt;/span&gt;(id, peers, election, heartbeat, storage))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://luxcgo.github.io/posts/tinykv%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8C%87%E5%AF%BC%E4%B9%A6/ - 2020-2022 源泉的小站</description>
        </item>
    
    
    
        <item>
        <title>寻找一种易于理解的raft算法的解读</title>
        <link>https://luxcgo.github.io/posts/%E5%AF%BB%E6%89%BE%E4%B8%80%E7%A7%8D%E6%98%93%E4%BA%8E%E7%90%86%E8%A7%A3%E7%9A%84raft%E7%AE%97%E6%B3%95%E7%9A%84%E8%A7%A3%E8%AF%BB/</link>
        <pubDate>Thu, 02 Dec 2021 01:49:21 +0800</pubDate>
        
        <guid>https://luxcgo.github.io/posts/%E5%AF%BB%E6%89%BE%E4%B8%80%E7%A7%8D%E6%98%93%E4%BA%8E%E7%90%86%E8%A7%A3%E7%9A%84raft%E7%AE%97%E6%B3%95%E7%9A%84%E8%A7%A3%E8%AF%BB/</guid>
        <description>源泉的小站 https://luxcgo.github.io/posts/%E5%AF%BB%E6%89%BE%E4%B8%80%E7%A7%8D%E6%98%93%E4%BA%8E%E7%90%86%E8%A7%A3%E7%9A%84raft%E7%AE%97%E6%B3%95%E7%9A%84%E8%A7%A3%E8%AF%BB/ -&lt;p&gt;尽管脱胎于paxos的raft算法的主要目的是容易开发者理解和实现，我作为一个分布式小白初读raft论文后还是一头雾水。主要原因我认为一是前置知识欠缺，二是论文中的一些结论的应用场景和由来没有指明，三是论文组织层层交错有一定难度。所以在我还没有被这部分知识诅咒之前，尝试把自己的理解表达出来，希望可以减少消磨一些同学们的意志力帮助理解。如有错误,还请大佬们不吝指正。&lt;/p&gt;
&lt;p&gt;拆解拆解&lt;/p&gt;
- https://luxcgo.github.io/posts/%E5%AF%BB%E6%89%BE%E4%B8%80%E7%A7%8D%E6%98%93%E4%BA%8E%E7%90%86%E8%A7%A3%E7%9A%84raft%E7%AE%97%E6%B3%95%E7%9A%84%E8%A7%A3%E8%AF%BB/ - 2020-2022 源泉的小站</description>
        </item>
    
    
    
        <item>
        <title>Raft算法解读与实现</title>
        <link>https://luxcgo.github.io/posts/raft%E7%AE%97%E6%B3%95%E8%A7%A3%E8%AF%BB%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Tue, 23 Nov 2021 23:44:34 +0800</pubDate>
        
        <guid>https://luxcgo.github.io/posts/raft%E7%AE%97%E6%B3%95%E8%A7%A3%E8%AF%BB%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
        <description>源泉的小站 https://luxcgo.github.io/posts/raft%E7%AE%97%E6%B3%95%E8%A7%A3%E8%AF%BB%E4%B8%8E%E5%AE%9E%E7%8E%B0/ -&lt;p&gt;脑裂&lt;/p&gt;
&lt;p&gt;随机超时时间&lt;/p&gt;
&lt;p&gt;最高端的系统设计往往只拥有最朴素的实现目标&lt;/p&gt;
- https://luxcgo.github.io/posts/raft%E7%AE%97%E6%B3%95%E8%A7%A3%E8%AF%BB%E4%B8%8E%E5%AE%9E%E7%8E%B0/ - 2020-2022 源泉的小站</description>
        </item>
    
    
    
        <item>
        <title>如何从豆瓣FM转移到网易云音乐？</title>
        <link>https://luxcgo.github.io/posts/%E9%97%B2%E8%B0%88/%E5%A6%82%E4%BD%95%E4%BB%8E%E8%B1%86%E7%93%A3fm%E8%BD%AC%E7%A7%BB%E5%88%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/</link>
        <pubDate>Mon, 15 Nov 2021 01:39:12 +0800</pubDate>
        
        <guid>https://luxcgo.github.io/posts/%E9%97%B2%E8%B0%88/%E5%A6%82%E4%BD%95%E4%BB%8E%E8%B1%86%E7%93%A3fm%E8%BD%AC%E7%A7%BB%E5%88%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/</guid>
        <description>源泉的小站 https://luxcgo.github.io/posts/%E9%97%B2%E8%B0%88/%E5%A6%82%E4%BD%95%E4%BB%8E%E8%B1%86%E7%93%A3fm%E8%BD%AC%E7%A7%BB%E5%88%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/ -&lt;p&gt;曾几何时，我是爱着豆瓣fm的，我在上面听了将近两万首歌，红心了近两千首歌曲。但最近她的推荐算法没那么好用的，过去的红心歌曲因为版权能听的也只有寥寥一百余首了。是时候逃离了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载红心歌曲链接，这是一个维护了十年的&lt;a href=&#34;https://github.com/loveunk/douban-favorite-music-parser&#34;&gt;豆瓣电台加心歌曲爬虫&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载红心歌曲，迅雷即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上传到网易云音乐云盘&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网易云对Mac未开放接口，M1 Mac还不支持X86架构的安卓模拟器，只能用开源API了&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Binaryify/NeteaseCloudMusicApi&#34;&gt;网易云音乐 Node.js API service&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装好后依赖后，可以直接运行他准备好的code批量上传，他有可能会上传失败，所以多跑几次就好了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;// /github/NeteaseCloudMusicApi/module_example/multi_song_upload.js
node multi_song_upload.js --phone_number=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;xx&amp;#34;&lt;/span&gt; --password=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;xx&amp;#34;&lt;/span&gt; --dir=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/Users/xx/Music&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;voila&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
- https://luxcgo.github.io/posts/%E9%97%B2%E8%B0%88/%E5%A6%82%E4%BD%95%E4%BB%8E%E8%B1%86%E7%93%A3fm%E8%BD%AC%E7%A7%BB%E5%88%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/ - 2020-2022 源泉的小站</description>
        </item>
    
    
    
        <item>
        <title>HRM 人力资源机器</title>
        <link>https://luxcgo.github.io/posts/%E9%97%B2%E8%B0%88/hrm-%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E6%9C%BA%E5%99%A8/</link>
        <pubDate>Sun, 07 Nov 2021 16:15:14 +0800</pubDate>
        
        <guid>https://luxcgo.github.io/posts/%E9%97%B2%E8%B0%88/hrm-%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E6%9C%BA%E5%99%A8/</guid>
        <description>源泉的小站 https://luxcgo.github.io/posts/%E9%97%B2%E8%B0%88/hrm-%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E6%9C%BA%E5%99%A8/ -&lt;h2 id=&#34;体积速度&#34;&gt;体积！速度！&lt;/h2&gt;
&lt;h3 id=&#34;第-1-年&#34;&gt;第 1 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;-- HUMAN RESOURCE MACHINE PROGRAM --

    INBOX   
    OUTBOX  
    INBOX   
    OUTBOX  
    INBOX   
    OUTBOX  



&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-2-年&#34;&gt;第 2 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;-- HUMAN RESOURCE MACHINE PROGRAM --

a:
    INBOX   
    OUTBOX  
    JUMP     a



&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;-- HUMAN RESOURCE MACHINE PROGRAM --

a:
    INBOX   
    OUTBOX  
    INBOX   
    OUTBOX  
    JUMP     a



&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-3-年&#34;&gt;第 3 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;-- HUMAN RESOURCE MACHINE PROGRAM --

    COPYFROM 4
    OUTBOX  
    COPYFROM 0
    OUTBOX  
    COPYFROM 3
    OUTBOX  



&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-4-年&#34;&gt;第 4 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;-- HUMAN RESOURCE MACHINE PROGRAM --

a:
    INBOX   
    COPYTO   0
    INBOX   
    OUTBOX  
    COPYFROM 0
    OUTBOX  
    JUMP     a



&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-5-年&#34;&gt;第 5 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;// 咖啡时间
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-6-年&#34;&gt;第 6 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;-- HUMAN RESOURCE MACHINE PROGRAM --

a:
    INBOX   
    COPYTO   0
    INBOX   
    ADD      0
    OUTBOX  
    JUMP     a



&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-7-年&#34;&gt;第 7 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;-- HUMAN RESOURCE MACHINE PROGRAM --

a:
b:
    INBOX   
    JUMPZ    b
    OUTBOX  
    JUMP     a



&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-8-年&#34;&gt;第 8 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;-- HUMAN RESOURCE MACHINE PROGRAM --

a:
    INBOX   
    COPYTO   0
    ADD      0
    ADD      0
    OUTBOX  
    JUMP     a



&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-9-年&#34;&gt;第 9 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;-- HUMAN RESOURCE MACHINE PROGRAM --

    JUMP     c
a:
    OUTBOX  
b:
c:
    INBOX   
    JUMPZ    a
    JUMP     b



&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-10-年&#34;&gt;第 10 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;-- HUMAN RESOURCE MACHINE PROGRAM --

a:
    INBOX   
    COPYTO   0
    ADD      0
    COPYTO   0
    ADD      0
    COPYTO   0
    ADD      0
    OUTBOX  
    JUMP     a



&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-11-年&#34;&gt;第 11 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;-- HUMAN RESOURCE MACHINE PROGRAM --

a:
    INBOX   
    COPYTO   0
    INBOX   
    COPYTO   1
    SUB      0
    OUTBOX  
    COPYFROM 0
    SUB      1
    OUTBOX  
    JUMP     a



&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-12-年&#34;&gt;第 12 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;-- HUMAN RESOURCE MACHINE PROGRAM --

a:
    INBOX   
    COPYTO   0
    ADD      0
    COPYTO   1
    ADD      1
    ADD      0
    COPYTO   0
    ADD      0
    COPYTO   0
    ADD      0
    COPYTO   0
    ADD      0
    OUTBOX  
    JUMP     a



&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-13-年&#34;&gt;第 13 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;// 运算步数需要优化
-- HUMAN RESOURCE MACHINE PROGRAM --

a:
b:
    INBOX   
    COPYTO   0
    INBOX   
    SUB      0
    JUMPZ    c
    JUMP     b
c:
    COPYFROM 0
    OUTBOX  
    JUMP     a



&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-14-年&#34;&gt;第 14 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;// 代码行数需要优化
// 运算步数需要优化
-- HUMAN RESOURCE MACHINE PROGRAM --

a:
b:
    INBOX   
    COPYTO   0
    INBOX   
    COPYTO   1
    SUB      0
    JUMPN    c
    COPYFROM 1
    OUTBOX  
    JUMP     b
c:
    COPYFROM 0
    OUTBOX  
    JUMP     a



&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-15-年&#34;&gt;第 15 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;// 斗志注入
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-16-年&#34;&gt;第 16 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-17-年&#34;&gt;第 17 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-18-年&#34;&gt;第 18 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-19-年&#34;&gt;第 19 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-20-年&#34;&gt;第 20 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-21-年&#34;&gt;第 21 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-22-年&#34;&gt;第 22 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-23-年&#34;&gt;第 23 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-24-年&#34;&gt;第 24 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-25-年&#34;&gt;第 25 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-26-年&#34;&gt;第 26 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-27-年&#34;&gt;第 27 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-28-年&#34;&gt;第 28 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-29-年&#34;&gt;第 29 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-30-年&#34;&gt;第 30 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-31-年&#34;&gt;第 31 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-32-年&#34;&gt;第 32 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-33-年&#34;&gt;第 33 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-34-年&#34;&gt;第 34 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-35-年&#34;&gt;第 35 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-36-年&#34;&gt;第 36 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-37-年&#34;&gt;第 37 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-38-年&#34;&gt;第 38 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-39-年&#34;&gt;第 39 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-40-年&#34;&gt;第 40 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-41-年&#34;&gt;第 41 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;第-42-年&#34;&gt;第 42 年&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&lt;/code&gt;&lt;/pre&gt;- https://luxcgo.github.io/posts/%E9%97%B2%E8%B0%88/hrm-%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E6%9C%BA%E5%99%A8/ - 2020-2022 源泉的小站</description>
        </item>
    
    
    
        <item>
        <title>Go程序是怎么跑起来的</title>
        <link>https://luxcgo.github.io/posts/go%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84/</link>
        <pubDate>Sun, 07 Nov 2021 11:51:19 +0800</pubDate>
        
        <guid>https://luxcgo.github.io/posts/go%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84/</guid>
        <description>源泉的小站 https://luxcgo.github.io/posts/go%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84/ -&lt;h2 id=&#34;go-的启动和执行流程&#34;&gt;Go 的启动和执行流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;理解可执行文件 01&lt;/li&gt;
&lt;li&gt;Go 进程的启动与初始化 02&lt;/li&gt;
&lt;li&gt;调度组件与调度循环 03&lt;/li&gt;
&lt;li&gt;处理阻塞 04&lt;/li&gt;
&lt;li&gt;调度器的发展历史 05&lt;/li&gt;
&lt;li&gt;与调度有关的常⻅问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;理解可执行文件&#34;&gt;理解可执行文件&lt;/h3&gt;
&lt;p&gt;成长看得见&lt;/p&gt;
- https://luxcgo.github.io/posts/go%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84/ - 2020-2022 源泉的小站</description>
        </item>
    
    
    
        <item>
        <title>Go Spec学习摘要</title>
        <link>https://luxcgo.github.io/posts/go/go-spec%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/</link>
        <pubDate>Sun, 31 Oct 2021 10:46:40 +0800</pubDate>
        
        <guid>https://luxcgo.github.io/posts/go/go-spec%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/</guid>
        <description>源泉的小站 https://luxcgo.github.io/posts/go/go-spec%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/ -- https://luxcgo.github.io/posts/go/go-spec%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/ - 2020-2022 源泉的小站</description>
        </item>
    
    
    
        <item>
        <title>Delve Golang专属的debugger</title>
        <link>https://luxcgo.github.io/posts/go/delve-golang%E4%B8%93%E5%B1%9E%E7%9A%84debugger/</link>
        <pubDate>Sun, 31 Oct 2021 00:45:41 +0800</pubDate>
        
        <guid>https://luxcgo.github.io/posts/go/delve-golang%E4%B8%93%E5%B1%9E%E7%9A%84debugger/</guid>
        <description>源泉的小站 https://luxcgo.github.io/posts/go/delve-golang%E4%B8%93%E5%B1%9E%E7%9A%84debugger/ -- https://luxcgo.github.io/posts/go/delve-golang%E4%B8%93%E5%B1%9E%E7%9A%84debugger/ - 2020-2022 源泉的小站</description>
        </item>
    
    
  </channel>
</rss> 
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Go猜想录</title>
    <link>https://luxcgo.github.io/categories/go/</link>
    <description>Recent content in Go on Go猜想录</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>2020-2022 Go猜想录</copyright>
    <lastBuildDate>Sun, 16 Jan 2022 14:31:07 +0800</lastBuildDate><atom:link href="https://luxcgo.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go语言Goroutine管理</title>
      <link>https://luxcgo.github.io/posts/go/golang-goroutine-manage/</link>
      <pubDate>Sun, 16 Jan 2022 14:31:07 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/go/golang-goroutine-manage/</guid>
      <description>Goroutine 操作系统会为该应用程序创建一个进程。作为一个应用程序，它像一个为所有资源而运行的容器。这些资源包括内存地址空间、文件句柄、设备和线程。
线程是操作系统调度的一种执行路径，用于在处理器执行我们在函数中编写的代码。一个进程从一个线程开始，即主线程，当该线程终止时，进程终止。这是因为主线程是应用程序的原点。然后，主线程可以依次启动更多的线程，而这些线程可以启动更多的线程。
无论线程属于哪个进程，操作系统都会安排线程在可用处理器上运行。每个操作系统都有自己的算法来做出这些决定。
Go 语言层面支持的 go 关键字，可以快速的让一个函数创建为 goroutine，我们可以认为 main 函数就是作为 goroutine 执行的。操作系统调度线程在可用处理器上运行，Go运行时调度 goroutines 在绑定到单个操作系统线程的逻辑处理器中运行(P)。即使使用这个单一的逻辑处理器和操作系统线程，也可以调度数十万 goroutine 以惊人的效率和性能并发运行。
如何清真的使用 goroutine 能不用就不用 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.HandleFunc(&amp;#34;/&amp;#34;, func(w http.ResponseWriter, r *http.Request) { fmt.Fprintln(w, &amp;#34;Hello, GopherCon SG&amp;#34;) }) go func() { if err := http.ListenAndServe(&amp;#34;:8080&amp;#34;, nil); err != nil { log.Fatal(err) } }() select {} } 上面的程序可以看到，为了防止main.main退出，结尾使用了空的select语句阻塞住了主函数。某种意义上来说是一个好的做法因为没有使用for循环或其他浪费CPU的方式防止主进程退出。不过这仍然属于脱裤子放屁。因为在执行ListenAndServe函数的goroutine返回前什么都做不了，那就不如不开启一个goroutine去完成这个任务，直接在主线程里做。
 如果你的 goroutine 在从另一个 goroutine 获得结果之前无法取得进展，那么通常情况下，你自己去做这项工作比委托它( go func() )更简单。这通常消除了将结果从 goroutine 返回到其启动器所需的大量状态跟踪和 chan 操作。</description>
    </item>
    
    <item>
      <title>Go Spec学习摘要</title>
      <link>https://luxcgo.github.io/posts/go/go-spec%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/</link>
      <pubDate>Sun, 31 Oct 2021 10:46:40 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/go/go-spec%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Delve Golang专属的debugger</title>
      <link>https://luxcgo.github.io/posts/go/delve-golang%E4%B8%93%E5%B1%9E%E7%9A%84debugger/</link>
      <pubDate>Sun, 31 Oct 2021 00:45:41 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/go/delve-golang%E4%B8%93%E5%B1%9E%E7%9A%84debugger/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Go Test</title>
      <link>https://luxcgo.github.io/posts/go/go-test/</link>
      <pubDate>Sun, 09 May 2021 15:32:48 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/go/go-test/</guid>
      <description>写test的好处  寻找不易发现的bug、edge case、side effect 记录目标行为，可作为一个文档帮助他人理解代码 自动化可重复  test包基本使用 https://golang.org/pkg/testing/#pkg-overview
// math/math.go  package math func Sum(numbers []int) int { sum := 0 for _, n := range numbers { sum += n } return sum } // math/math_test.go  package math import ( &amp;#34;testing&amp;#34; ) func TestSum(t *testing.T) { sum := Sum([]int{10, -2, 3}) if sum != 11 { t.Errorf(&amp;#34;fail want 11 bug got %d&amp;#34;, sum) } } test文件的文件名和函数签名都有格式的要求，并要放在和被测试的函数同一个package下 满足上述要求，运行go test命令就可以看到测试函数的运行结果。</description>
    </item>
    
  </channel>
</rss>

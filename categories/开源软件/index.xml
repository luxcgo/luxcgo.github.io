<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开源软件 on 源泉的小站</title>
    <link>https://luxcgo.github.io/categories/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/</link>
    <description>Recent content in 开源软件 on 源泉的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 01 Oct 2021 19:29:19 +0800</lastBuildDate><atom:link href="https://luxcgo.github.io/categories/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>git使用笔记</title>
      <link>https://luxcgo.github.io/posts/git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 01 Oct 2021 19:29:19 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>Configuring Git   Settings
 Name Email Default Editor Line Ending    Levels
 System: All users Global: All repositories of the current user Local: The current repository    $ git config --global user.name &amp;#34;hackcraker&amp;#34; $ git config --global user.email mgyuchen@163.com $ git config --global core.editor vim # 用于多平台协作 $ git config --global core.autocrlf input Creating Snapshots Initializing a repository
 git init  Staging files</description>
    </item>
    
    <item>
      <title>Docker使用笔记</title>
      <link>https://luxcgo.github.io/posts/docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 11 Sep 2021 15:27:19 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>初识docker # 查看版本并顺便检查docker server正常启动，cli可以连接到engine $ docker version # 查看engine的一些配置项 $ docker info # 查看docker command line structure # docker command的格式，为了解决激增的命令数量难以记忆的问题，推出Management Commands模式 # 1. 使用Management Commands: docker &amp;lt;command&amp;gt; &amp;lt;sub-command&amp;gt; (options) # 2. 使用Commands: docker &amp;lt;command&amp;gt; (options) $ docker # 例子，如下两种模式的命令目的是一样的 $ docker container run $ docker run 创建一个Nginx服务器  Downloaded image nginx from Docker Hub Started a new container from that image Opened port 80 on the host IP Routes that traffic to the container IP, port 80  # --publish(or -p) 是一种映射host port到container port的方法 $ docker container run --publish 80:80 nginx # 在后台运行 # 可以使用docker container run --help查看更多详细内容 $ docker container run --publish 80:80 --detach nginx # docker ps亦可 $ docker container ls # 停止容器但不删除 # docker stop亦可 $ docker container stop 690 # docker container run总是开启一个新的容器 # docker container start是开启一个已经存在的停止的容器 $ docker container start 690 $ docker container ls $ docker container ls -a # 在不手动设置容器名称的情况下docker会随机生成一个adj+n的名称 # detail: https://github.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 源泉的小站</title>
    <link>https://luxcgo.github.io/posts/</link>
    <description>Recent content in Posts on 源泉的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>2020-2022 源泉的小站</copyright>
    <lastBuildDate>Sun, 16 Jan 2022 14:31:07 +0800</lastBuildDate><atom:link href="https://luxcgo.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go语言Goroutine管理</title>
      <link>https://luxcgo.github.io/posts/go/golang-goroutine-manage/</link>
      <pubDate>Sun, 16 Jan 2022 14:31:07 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/go/golang-goroutine-manage/</guid>
      <description>Goroutine 操作系统会为该应用程序创建一个进程。作为一个应用程序，它像一个为所有资源而运行的容器。这些资源包括内存地址空间、文件句柄、设备和线程。
线程是操作系统调度的一种执行路径，用于在处理器执行我们在函数中编写的代码。一个进程从一个线程开始，即主线程，当该线程终止时，进程终止。这是因为主线程是应用程序的原点。然后，主线程可以依次启动更多的线程，而这些线程可以启动更多的线程。
无论线程属于哪个进程，操作系统都会安排线程在可用处理器上运行。每个操作系统都有自己的算法来做出这些决定。
Go 语言层面支持的 go 关键字，可以快速的让一个函数创建为 goroutine，我们可以认为 main 函数就是作为 goroutine 执行的。操作系统调度线程在可用处理器上运行，Go运行时调度 goroutines 在绑定到单个操作系统线程的逻辑处理器中运行(P)。即使使用这个单一的逻辑处理器和操作系统线程，也可以调度数十万 goroutine 以惊人的效率和性能并发运行。
如何清真的使用 goroutine 能不用就不用 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.HandleFunc(&amp;#34;/&amp;#34;, func(w http.ResponseWriter, r *http.Request) { fmt.Fprintln(w, &amp;#34;Hello, GopherCon SG&amp;#34;) }) go func() { if err := http.ListenAndServe(&amp;#34;:8080&amp;#34;, nil); err != nil { log.Fatal(err) } }() select {} } 上面的程序可以看到，为了防止main.main退出，结尾使用了空的select语句阻塞住了主函数。某种意义上来说是一个好的做法因为没有使用for循环或其他浪费CPU的方式防止主进程退出。不过这仍然属于脱裤子放屁。因为在执行ListenAndServe函数的goroutine返回前什么都做不了，那就不如不开启一个goroutine去完成这个任务，直接在主线程里做。
 如果你的 goroutine 在从另一个 goroutine 获得结果之前无法取得进展，那么通常情况下，你自己去做这项工作比委托它( go func() )更简单。这通常消除了将结果从 goroutine 返回到其启动器所需的大量状态跟踪和 chan 操作。</description>
    </item>
    
    <item>
      <title>博客诞生记</title>
      <link>https://luxcgo.github.io/posts/%E5%B7%A5%E7%A8%8B/%E5%8D%9A%E5%AE%A2%E8%AF%9E%E7%94%9F%E8%AE%B0/</link>
      <pubDate>Sun, 09 Jan 2022 22:16:50 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/%E5%B7%A5%E7%A8%8B/%E5%8D%9A%E5%AE%A2%E8%AF%9E%E7%94%9F%E8%AE%B0/</guid>
      <description>TL;DR 使用自定义指令hn，含义是hugo deploy。自动构建两个网站luxcgo.github.io和luxcgo.com的静态文件，分别是用于国外和国内访问，然后推送到我的私有仓库中，通过submodule功能同步到公有仓库。随即触发github action构建网站镜像推送到私有镜像仓库中，我的云服务器检测到镜像更新自动拉取完成网站更新。
技术选型   前端：静态博客hugo
  主题：参数尽量两种主题都可以使用
  --- title: &amp;#34;&amp;#34; date: 2021-11-15T01:39:12+08:00 draft: true title: Git weight: 1 bookToc: false bookHidden: true bookCollapseSection: true ---   diary作为日常发布
  book作为整合发布
    后端：服务器选择caddy 2
  运维：
 使用traefik签发证书和反向代理 使用deploy脚本自动构建静态文件和推送 使用github action在推送时自动构建镜像并分别推送  使用git submodule luxcgo.github.io luxcgo.com   使用watchtower自动更新网站    定制化 评论系统   utteranc
 issue以filepath作为唯一索引    gitalk</description>
    </item>
    
    <item>
      <title>Tinykv第三方指导书</title>
      <link>https://luxcgo.github.io/posts/tinykv%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8C%87%E5%AF%BC%E4%B9%A6/</link>
      <pubDate>Sun, 12 Dec 2021 17:41:03 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/tinykv%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8C%87%E5%AF%BC%E4%B9%A6/</guid>
      <description>Project2A 实现Raft算法 数据结构 // Prs map[uint64]*Progress // leader用来维护所有follower的日志进度信息 type Progress struct { // 当前follower和leader最后一个一致的日志的index 	Match uint64 // 当前follower希望leader下一次同步日志时，第一条日志的index  Next uint64 } 消息处理 MsgPropose 作用：提议在领导者节点添加新的日志
类型：本地消息
处理者：领导人
Test func newTestRaft(id uint64, peers []uint64, election, heartbeat int, storage Storage) *Raft { return newRaft(newTestConfig(id, peers, election, heartbeat, storage)) } </description>
    </item>
    
    <item>
      <title>寻找一种易于理解的raft算法的解读</title>
      <link>https://luxcgo.github.io/posts/%E5%AF%BB%E6%89%BE%E4%B8%80%E7%A7%8D%E6%98%93%E4%BA%8E%E7%90%86%E8%A7%A3%E7%9A%84raft%E7%AE%97%E6%B3%95%E7%9A%84%E8%A7%A3%E8%AF%BB/</link>
      <pubDate>Thu, 02 Dec 2021 01:49:21 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/%E5%AF%BB%E6%89%BE%E4%B8%80%E7%A7%8D%E6%98%93%E4%BA%8E%E7%90%86%E8%A7%A3%E7%9A%84raft%E7%AE%97%E6%B3%95%E7%9A%84%E8%A7%A3%E8%AF%BB/</guid>
      <description>尽管脱胎于paxos的raft算法的主要目的是容易开发者理解和实现，我作为一个分布式小白初读raft论文后还是一头雾水。主要原因我认为一是前置知识欠缺，二是论文中的一些结论的应用场景和由来没有指明，三是论文组织层层交错有一定难度。所以在我还没有被这部分知识诅咒之前，尝试把自己的理解表达出来，希望可以减少消磨一些同学们的意志力帮助理解。如有错误,还请大佬们不吝指正。
拆解拆解</description>
    </item>
    
    <item>
      <title>Raft算法解读与实现</title>
      <link>https://luxcgo.github.io/posts/raft%E7%AE%97%E6%B3%95%E8%A7%A3%E8%AF%BB%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 23 Nov 2021 23:44:34 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/raft%E7%AE%97%E6%B3%95%E8%A7%A3%E8%AF%BB%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>脑裂
随机超时时间
最高端的系统设计往往只拥有最朴素的实现目标</description>
    </item>
    
    <item>
      <title>如何从豆瓣FM转移到网易云音乐？</title>
      <link>https://luxcgo.github.io/posts/%E9%97%B2%E8%B0%88/%E5%A6%82%E4%BD%95%E4%BB%8E%E8%B1%86%E7%93%A3fm%E8%BD%AC%E7%A7%BB%E5%88%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/</link>
      <pubDate>Mon, 15 Nov 2021 01:39:12 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/%E9%97%B2%E8%B0%88/%E5%A6%82%E4%BD%95%E4%BB%8E%E8%B1%86%E7%93%A3fm%E8%BD%AC%E7%A7%BB%E5%88%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/</guid>
      <description>曾几何时，我是爱着豆瓣fm的，我在上面听了将近两万首歌，红心了近两千首歌曲。但最近她的推荐算法没那么好用的，过去的红心歌曲因为版权能听的也只有寥寥一百余首了。是时候逃离了。
  下载红心歌曲链接，这是一个维护了十年的豆瓣电台加心歌曲爬虫
  下载红心歌曲，迅雷即可
  上传到网易云音乐云盘
  网易云对Mac未开放接口，M1 Mac还不支持X86架构的安卓模拟器，只能用开源API了
网易云音乐 Node.js API service
安装好后依赖后，可以直接运行他准备好的code批量上传，他有可能会上传失败，所以多跑几次就好了。
// /github/NeteaseCloudMusicApi/module_example/multi_song_upload.js node multi_song_upload.js --phone_number=&amp;#34;xx&amp;#34; --password=&amp;#34;xx&amp;#34; --dir=&amp;#39;/Users/xx/Music&amp;#39;   voila
  </description>
    </item>
    
    <item>
      <title>HRM 人力资源机器</title>
      <link>https://luxcgo.github.io/posts/%E9%97%B2%E8%B0%88/hrm-%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E6%9C%BA%E5%99%A8/</link>
      <pubDate>Sun, 07 Nov 2021 16:15:14 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/%E9%97%B2%E8%B0%88/hrm-%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E6%9C%BA%E5%99%A8/</guid>
      <description>体积！速度！ 第 1 年 -- HUMAN RESOURCE MACHINE PROGRAM -- INBOX OUTBOX INBOX OUTBOX INBOX OUTBOX 第 2 年 -- HUMAN RESOURCE MACHINE PROGRAM -- a: INBOX OUTBOX JUMP a -- HUMAN RESOURCE MACHINE PROGRAM -- a: INBOX OUTBOX INBOX OUTBOX JUMP a 第 3 年 -- HUMAN RESOURCE MACHINE PROGRAM -- COPYFROM 4 OUTBOX COPYFROM 0 OUTBOX COPYFROM 3 OUTBOX 第 4 年 -- HUMAN RESOURCE MACHINE PROGRAM -- a: INBOX COPYTO 0 INBOX OUTBOX COPYFROM 0 OUTBOX JUMP a 第 5 年 // 咖啡时间 第 6 年 -- HUMAN RESOURCE MACHINE PROGRAM -- a: INBOX COPYTO 0 INBOX ADD 0 OUTBOX JUMP a 第 7 年 -- HUMAN RESOURCE MACHINE PROGRAM -- a: b: INBOX JUMPZ b OUTBOX JUMP a 第 8 年 -- HUMAN RESOURCE MACHINE PROGRAM -- a: INBOX COPYTO 0 ADD 0 ADD 0 OUTBOX JUMP a 第 9 年 -- HUMAN RESOURCE MACHINE PROGRAM -- JUMP c a: OUTBOX b: c: INBOX JUMPZ a JUMP b 第 10 年 -- HUMAN RESOURCE MACHINE PROGRAM -- a: INBOX COPYTO 0 ADD 0 COPYTO 0 ADD 0 COPYTO 0 ADD 0 OUTBOX JUMP a 第 11 年 -- HUMAN RESOURCE MACHINE PROGRAM -- a: INBOX COPYTO 0 INBOX COPYTO 1 SUB 0 OUTBOX COPYFROM 0 SUB 1 OUTBOX JUMP a 第 12 年 -- HUMAN RESOURCE MACHINE PROGRAM -- a: INBOX COPYTO 0 ADD 0 COPYTO 1 ADD 1 ADD 0 COPYTO 0 ADD 0 COPYTO 0 ADD 0 COPYTO 0 ADD 0 OUTBOX JUMP a 第 13 年 // 运算步数需要优化 -- HUMAN RESOURCE MACHINE PROGRAM -- a: b: INBOX COPYTO 0 INBOX SUB 0 JUMPZ c JUMP b c: COPYFROM 0 OUTBOX JUMP a 第 14 年 // 代码行数需要优化 // 运算步数需要优化 -- HUMAN RESOURCE MACHINE PROGRAM -- a: b: INBOX COPYTO 0 INBOX COPYTO 1 SUB 0 JUMPN c COPYFROM 1 OUTBOX JUMP b c: COPYFROM 0 OUTBOX JUMP a 第 15 年 // 斗志注入 第 16 年 第 17 年 第 18 年 第 19 年 第 20 年 第 21 年 第 22 年 第 23 年 第 24 年 第 25 年 第 26 年 第 27 年 第 28 年 第 29 年 第 30 年 第 31 年 第 32 年 第 33 年 第 34 年 第 35 年 第 36 年 第 37 年 第 38 年 第 39 年 第 40 年 第 41 年 第 42 年 </description>
    </item>
    
    <item>
      <title>Go程序是怎么跑起来的</title>
      <link>https://luxcgo.github.io/posts/go%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84/</link>
      <pubDate>Sun, 07 Nov 2021 11:51:19 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/go%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84/</guid>
      <description>Go 的启动和执行流程  理解可执行文件 01 Go 进程的启动与初始化 02 调度组件与调度循环 03 处理阻塞 04 调度器的发展历史 05 与调度有关的常⻅问题  理解可执行文件 成长看得见</description>
    </item>
    
    <item>
      <title>Go Spec学习摘要</title>
      <link>https://luxcgo.github.io/posts/go/go-spec%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/</link>
      <pubDate>Sun, 31 Oct 2021 10:46:40 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/go/go-spec%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Delve Golang专属的debugger</title>
      <link>https://luxcgo.github.io/posts/go/delve-golang%E4%B8%93%E5%B1%9E%E7%9A%84debugger/</link>
      <pubDate>Sun, 31 Oct 2021 00:45:41 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/go/delve-golang%E4%B8%93%E5%B1%9E%E7%9A%84debugger/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sourcetree配置</title>
      <link>https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/sourcetree%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 31 Oct 2021 00:31:44 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/sourcetree%E9%85%8D%E7%BD%AE/</guid>
      <description>在mac上配置github账户 443时要配置代理
403时要解决推送时没有权限问题
因为github加强了安全认证，不再支持密码用户名的形式登陆，而采用了token形式
配置proxy 删除/Users/lucas/Library/ApplicationSupport/SourceTree目录下的密码文件 在sourcetree中配置账户信息 github上申请相关token 修改mac中钥匙串访问中的密码为token  参考链接  Suffering from the latest 403 error from GitHub on SourceTree? Connecting Mac SourceTree with your GitHub account  </description>
    </item>
    
    <item>
      <title>Vscode奇技淫巧</title>
      <link>https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/vscode%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</link>
      <pubDate>Sat, 30 Oct 2021 23:46:10 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/vscode%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</guid>
      <description>使用VsCode正则表达式批量替换    正则查找：myfunction\((.*),(.*)\) 替换：myfunction($1,$2)   查找：&amp;quot;static/(.*).css 替换：&amp;quot;static/css/$1.css // 替换前 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;static/cui.css&amp;#34;&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;static/style.css&amp;#34;&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;static/less.css&amp;#34;&amp;gt; // 替换后 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;static/css/cui.css&amp;#34;&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;static/css/style.css&amp;#34;&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;static/css/less.css&amp;#34;&amp;gt;   正则 \.(jpg|gif|png|txt|js)(\?.*)? [0-9]+\.[0-9]+ 404 文本 images/mybg.jpg?abc=1 0.001 404 561 0.0 匹配结果：.jpg?abc=1 0.001 404   \(https://www.acwing.com/problem/content/(\d+)/\)\n\n### 题目\n\n### 输入格式 (https://www.acwing.com/problem/content/solution/$1/1/)\n\n### 题目\n\n### 输入格式 \(problems/(.*)-(.*)\) (problems/$1) 命令行输入code自动打开vscode </description>
    </item>
    
    <item>
      <title>英语单词</title>
      <link>https://luxcgo.github.io/posts/%E8%AF%AD%E8%A8%80/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/</link>
      <pubDate>Sun, 24 Oct 2021 14:34:37 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/%E8%AF%AD%E8%A8%80/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/</guid>
      <description>New words    英语 释义     disparate 根本不同的   tout 吹嘘，兜售   dread    impede    paginate                     </description>
    </item>
    
    <item>
      <title>git使用笔记</title>
      <link>https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 01 Oct 2021 19:29:19 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>Configuring Git   Settings
 Name Email Default Editor Line Ending    Levels
 System: All users Global: All repositories of the current user Local: The current repository    $ git config --global user.name &amp;#34;hackcraker&amp;#34; $ git config --global user.email mgyuchen@163.com $ git config --global core.editor vim # 用于多平台协作 $ git config --global core.autocrlf input Creating Snapshots Initializing a repository
 git init  Staging files</description>
    </item>
    
    <item>
      <title>dns污染</title>
      <link>https://luxcgo.github.io/posts/%E5%B7%A5%E7%A8%8B/dns%E6%B1%A1%E6%9F%93/</link>
      <pubDate>Sun, 19 Sep 2021 23:40:39 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/%E5%B7%A5%E7%A8%8B/dns%E6%B1%A1%E6%9F%93/</guid>
      <description>Failed to connect to raw.githubusercontent.com:443 下个文件失败了，一看dns解析后直接指向了BlackHole 0.0.0.0
域名的解析过程是：
Hosts文件和本地DNS缓存 → 路由器的缓存 → ISP DNS缓存 → 根DNS服务器
方法一：在第一步解析时解决问题 获取真实的ip地址后加到hosts文件中就可以避免dns污染了
$ cat /etc/hosts 直接修改的话比较麻烦，下面这个软件SwitchHosts方便很多
方法二：在第四步解析时解决问题 直接修改本机网络用到的DNS服务器，
在中国大陆地区的话阿里腾讯的还是比较好用，我在深圳南山用谷歌服务器解析还是有问题
223.5.5.5 223.6.6.6 119.29.29.29 119.28.28.28 </description>
    </item>
    
    <item>
      <title>Terminal自定义</title>
      <link>https://luxcgo.github.io/posts/%E5%B7%A5%E7%A8%8B/terminal/</link>
      <pubDate>Sun, 19 Sep 2021 22:27:20 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/%E5%B7%A5%E7%A8%8B/terminal/</guid>
      <description>zsh  framework: ohmyzsh   Plugin:
 docker docker-compose z zsh-completions zsh-syntax-highlighting    Theme:
  powerlevel10k
 How do I add username and/or hostname to prompt?        # 用户管理 # 1. 删除用户及目录 sudo userdel -r lighthouse # 2. 添加新用户 sudo useradd -d /home/lucas -m lucas # zsh # oh my zsh # p10k # Run Docker commands without sudo sudo gpasswd -a $USER docker # IMPORTANT: Log out and log back in so that your group membership is re-evaluated.</description>
    </item>
    
    <item>
      <title>docker基本使用2</title>
      <link>https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A82/</link>
      <pubDate>Sat, 11 Sep 2021 15:27:19 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A82/</guid>
      <description>初识docker # 查看版本并顺便检查docker server正常启动，cli可以连接到engine $ docker version # 查看engine的一些配置项 $ docker info # 查看docker command line structure # docker command的格式，为了解决激增的命令数量难以记忆的问题，推出Management Commands模式 # 1. 使用Management Commands: docker &amp;lt;command&amp;gt; &amp;lt;sub-command&amp;gt; (options) # 2. 使用Commands: docker &amp;lt;command&amp;gt; (options) $ docker # 例子，如下两种模式的命令目的是一样的 $ docker container run $ docker run 创建一个Nginx服务器  Downloaded image nginx from Docker Hub Started a new container from that image Opened port 80 on the host IP Routes that traffic to the container IP, port 80  # --publish(or -p) 是一种映射host port到container port的方法 $ docker container run --publish 80:80 nginx # 在后台运行 # 可以使用docker container run --help查看更多详细内容 $ docker container run --publish 80:80 --detach nginx # docker ps亦可 $ docker container ls # 停止容器但不删除 # docker stop亦可 $ docker container stop 690 # docker container run总是开启一个新的容器 # docker container start是开启一个已经存在的停止的容器 $ docker container start 690 $ docker container ls $ docker container ls -a # 在不手动设置容器名称的情况下docker会随机生成一个adj+n的名称 # detail: https://github.</description>
    </item>
    
    <item>
      <title>Go Test</title>
      <link>https://luxcgo.github.io/posts/go/go-test/</link>
      <pubDate>Sun, 09 May 2021 15:32:48 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/go/go-test/</guid>
      <description>写test的好处  寻找不易发现的bug、edge case、side effect 记录目标行为，可作为一个文档帮助他人理解代码 自动化可重复  test包基本使用 https://golang.org/pkg/testing/#pkg-overview
// math/math.go  package math func Sum(numbers []int) int { sum := 0 for _, n := range numbers { sum += n } return sum } // math/math_test.go  package math import ( &amp;#34;testing&amp;#34; ) func TestSum(t *testing.T) { sum := Sum([]int{10, -2, 3}) if sum != 11 { t.Errorf(&amp;#34;fail want 11 bug got %d&amp;#34;, sum) } } test文件的文件名和函数签名都有格式的要求，并要放在和被测试的函数同一个package下 满足上述要求，运行go test命令就可以看到测试函数的运行结果。</description>
    </item>
    
    <item>
      <title>docker基本使用1</title>
      <link>https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A81/</link>
      <pubDate>Sat, 13 Mar 2021 16:48:30 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/%E5%A4%87%E5%BF%98/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A81/</guid>
      <description>1. 容器的基础命令 使用docker的好处  便于构建各种依赖关系 快速构建 快速迁移 和宿主主机互不影响  初步使用 $ docker run busybox echo hello world hello world $ docker run -ti ubuntu root@3cc1d9fcadda:/# apt-get update root@3cc1d9fcadda:/# apt-get install figlet root@3cc1d9fcadda:/# figlet LuxcGo _ ____ | | _ ___ _____ / ___| ___ | | | | | \ \/ / __| | _ / _ \ | |__| |_| |&amp;gt; &amp;lt; (__| |_| | (_) | |_____\__,_/_/\_\___|\____|\___/ root@3cc1d9fcadda:/# dpkg -l root@3cc1d9fcadda:/# dpkg -l | wc -l 98 lucas@VM-12-4-ubuntu:~$ dpkg -l | wc -l 1877 运行一个容器 $ docker run jpetazzo/clock $ sleep 10 &amp;amp; [1] 18495 $ [1] + 18495 done sleep 10 # 后台创建并启动和sleep命令类似 $ docker run -d jpetazzo/clock # 只显示运行着的容器 $ docker ps # 显示所有容器 $ docker ps -a # 查看最后一个启动的容器 $ docker ps -l # 查看所有正在运行的容器的id（--quiet） $ docker ps -q # 可以同时合并多条命令 $ docker ps -ql $ docker ps -q -l # 查看日志 $ docker logs &amp;lt;container ID&amp;gt; # --follow $ docker logs 82 -f # --tail $ docker logs 82 -f -n 10 # polite shutdown（传递一个关闭的信号） $ docker stop 49 # 强制关闭 $ docker kill 82 48 后台运行的容器 $ docker run -ti ubuntu root@3cc1d9fcadda:/# top # 退出容器 ^p^q # 重新进入容器 $ docker attach 34 # 或者用个 子命令 $ docker attach $(docker ps -ql) # 如果想要进入容器输入内容的话使用docker attach  # 如果只是要查看容器内的输出的内容话最好使用docker logs，如果进入容器看日志后使用了^c实际上是停止了容器 $ docker logs --tail 1 --follow $(docker ps -ql) # 重启停止的容器 $ docker start &amp;lt;containerID&amp;gt; 2.</description>
    </item>
    
  </channel>
</rss>

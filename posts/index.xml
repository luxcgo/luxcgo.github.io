<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 源泉的小站</title>
    <link>https://luxcgo.github.io/posts/</link>
    <description>Recent content in Posts on 源泉的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 01 Oct 2021 19:29:19 +0800</lastBuildDate><atom:link href="https://luxcgo.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>git使用笔记</title>
      <link>https://luxcgo.github.io/posts/git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 01 Oct 2021 19:29:19 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>Configuring Git   Settings
 Name Email Default Editor Line Ending    Levels
 System: All users Global: All repositories of the current user Local: The current repository    $ git config --global user.name &amp;#34;hackcraker&amp;#34; $ git config --global user.email mgyuchen@163.com $ git config --global core.editor vim # 用于多平台协作 $ git config --global core.autocrlf input Creating Snapshots Initializing a repository
 git init  Staging files</description>
    </item>
    
    <item>
      <title>Dns污染</title>
      <link>https://luxcgo.github.io/posts/dns%E6%B1%A1%E6%9F%93/</link>
      <pubDate>Sun, 19 Sep 2021 23:40:39 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/dns%E6%B1%A1%E6%9F%93/</guid>
      <description>Failed to connect to raw.githubusercontent.com:443 下个文件失败了，一看dns解析后直接指向了BlackHole 0.0.0.0
域名的解析过程是：
Hosts文件和本地DNS缓存 → 路由器的缓存 → ISP DNS缓存 → 根DNS服务器
方法一：在第一步解析时解决问题 获取真实的ip地址后加到hosts文件中就可以避免dns污染了
$ cat /etc/hosts 直接修改的话比较麻烦，下面这个软件SwitchHosts方便很多
方法二：在第四步解析时解决问题 直接修改本机网络用到的DNS服务器，
在中国大陆地区的话阿里腾讯的还是比较好用，我在深圳南山用谷歌服务器解析还是有问题
223.5.5.5 223.6.6.6 119.29.29.29 119.28.28.28 </description>
    </item>
    
    <item>
      <title>Terminal</title>
      <link>https://luxcgo.github.io/posts/terminal/</link>
      <pubDate>Sun, 19 Sep 2021 22:27:20 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/terminal/</guid>
      <description>zsh  framework: ohmyzsh  Plugin:  docker docker-compose z zsh-completions zsh-syntax-highlighting   Theme:  powerlevel10k  How do I add username and/or hostname to prompt?        </description>
    </item>
    
    <item>
      <title>Docker使用笔记</title>
      <link>https://luxcgo.github.io/posts/docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 11 Sep 2021 15:27:19 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>初识docker # 查看版本并顺便检查docker server正常启动，cli可以连接到engine $ docker version # 查看engine的一些配置项 $ docker info # 查看docker command line structure # docker command的格式，为了解决激增的命令数量难以记忆的问题，推出Management Commands模式 # 1. 使用Management Commands: docker &amp;lt;command&amp;gt; &amp;lt;sub-command&amp;gt; (options) # 2. 使用Commands: docker &amp;lt;command&amp;gt; (options) $ docker # 例子，如下两种模式的命令目的是一样的 $ docker container run $ docker run 创建一个Nginx服务器  Downloaded image nginx from Docker Hub Started a new container from that image Opened port 80 on the host IP Routes that traffic to the container IP, port 80  # --publish(or -p) 是一种映射host port到container port的方法 $ docker container run --publish 80:80 nginx # 在后台运行 # 可以使用docker container run --help查看更多详细内容 $ docker container run --publish 80:80 --detach nginx # docker ps亦可 $ docker container ls # 停止容器但不删除 # docker stop亦可 $ docker container stop 690 # docker container run总是开启一个新的容器 # docker container start是开启一个已经存在的停止的容器 $ docker container start 690 $ docker container ls $ docker container ls -a # 在不手动设置容器名称的情况下docker会随机生成一个adj+n的名称 # detail: https://github.</description>
    </item>
    
    <item>
      <title>Tmux精简指南</title>
      <link>https://luxcgo.github.io/posts/tmux%E7%B2%BE%E7%AE%80%E6%8C%87%E5%8D%97/</link>
      <pubDate>Thu, 09 Sep 2021 21:20:53 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/tmux%E7%B2%BE%E7%AE%80%E6%8C%87%E5%8D%97/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Go Test</title>
      <link>https://luxcgo.github.io/posts/go-test/</link>
      <pubDate>Sun, 09 May 2021 15:32:48 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/go-test/</guid>
      <description>写test的好处  寻找不易发现的bug、edge case、side effect 记录目标行为，可作为一个文档帮助他人理解代码 自动化可重复  test包基本使用 https://golang.org/pkg/testing/#pkg-overview
// math/math.go  package math func Sum(numbers []int) int { sum := 0 for _, n := range numbers { sum += n } return sum } // math/math_test.go  package math import ( &amp;#34;testing&amp;#34; ) func TestSum(t *testing.T) { sum := Sum([]int{10, -2, 3}) if sum != 11 { t.Errorf(&amp;#34;fail want 11 bug got %d&amp;#34;, sum) } } test文件的文件名和函数签名都有格式的要求，并要放在和被测试的函数同一个package下 满足上述要求，运行go test命令就可以看到测试函数的运行结果。</description>
    </item>
    
    <item>
      <title>docker基本使用</title>
      <link>https://luxcgo.github.io/posts/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 13 Mar 2021 16:48:30 +0800</pubDate>
      
      <guid>https://luxcgo.github.io/posts/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>1. 容器的基础命令 使用docker的好处  便于构建各种依赖关系 快速构建 快速迁移 和宿主主机互不影响  初步使用 $ docker run busybox echo hello world hello world $ docker run -ti ubuntu root@3cc1d9fcadda:/# apt-get update root@3cc1d9fcadda:/# apt-get install figlet root@3cc1d9fcadda:/# figlet LuxcGo _ ____ | | _ ___ _____ / ___| ___ | | | | | \ \/ / __| | _ / _ \ | |__| |_| |&amp;gt; &amp;lt; (__| |_| | (_) | |_____\__,_/_/\_\___|\____|\___/ root@3cc1d9fcadda:/# dpkg -l root@3cc1d9fcadda:/# dpkg -l | wc -l 98 lucas@VM-12-4-ubuntu:~$ dpkg -l | wc -l 1877 运行一个容器 $ docker run jpetazzo/clock $ sleep 10 &amp;amp; [1] 18495 $ [1] + 18495 done sleep 10 # 后台创建并启动和sleep命令类似 $ docker run -d jpetazzo/clock # 只显示运行着的容器 $ docker ps # 显示所有容器 $ docker ps -a # 查看最后一个启动的容器 $ docker ps -l # 查看所有正在运行的容器的id（--quiet） $ docker ps -q # 可以同时合并多条命令 $ docker ps -ql $ docker ps -q -l # 查看日志 $ docker logs &amp;lt;container ID&amp;gt; # --follow $ docker logs 82 -f # --tail $ docker logs 82 -f -n 10 # polite shutdown（传递一个关闭的信号） $ docker stop 49 # 强制关闭 $ docker kill 82 48 后台运行的容器 $ docker run -ti ubuntu root@3cc1d9fcadda:/# top # 退出容器 ^p^q # 重新进入容器 $ docker attach 34 # 或者用个 子命令 $ docker attach $(docker ps -ql) # 如果想要进入容器输入内容的话使用docker attach  # 如果只是要查看容器内的输出的内容话最好使用docker logs，如果进入容器看日志后使用了^c实际上是停止了容器 $ docker logs --tail 1 --follow $(docker ps -ql) # 重启停止的容器 $ docker start &amp;lt;containerID&amp;gt; 2.</description>
    </item>
    
  </channel>
</rss>
